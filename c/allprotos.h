clObject clAcons(clProto), clAssoc1(clProto), clCar(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCheckKeys(clProto), clConc(clProto), clCons(clProto),
  clConsp(clProto), clEndp(clProto), clError(clProto),
  clExtraArgs(clProto), clKeyArg(clProto), clMakeKeyword(clProto),
  clMissingArgs(clProto) __attribute__((noreturn)), clRassoc1(clProto),
  clSatisfiesTheTest(clProto);

void clCatchInterrupts __P((int));
clObject clApplicableRestart(clProto), clApply(clProto),
  clBreak(clProto), clCanonicalizeCondition(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCerror(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCheckKeys(clProto), clClassOf(clProto), clClassp(clProto),
  clCons(clProto), clEndp(clProto), clEnsureClass(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEq(clProto), clEql(clProto), clError(clProto), clExit(clProto),
  clExpandType(clProto), clExtraArgs(clProto),
  clFastFind __P((clObject, clObject)), clFindClass(clProto),
  clFpeClass __P((int)), clFuncall(clProto), clGensym(clProto),
  cl_SETF_GlobalDeclaration(clProto), clHandlerConditionType(clProto),
  clHandlerFunction(clProto), clInvokeApplicableRestart(clProto),
  clKeyArg(clProto), clLength(clProto), clList(clProto),
  clListSTAR(clProto), cl_SETF_MacroFunction(clProto),
  clMakeArray(clProto), clMakeCondition(clProto),
  clMakeKeyword(clProto), clMakeRestart(clProto),
  clMakeStructure(clProto), clMakeSymbol(clProto),
  clMissingArgs(clProto), clNot(clProto), clNstringCapitalize(clProto),
  clNsubstitute(clProto), clNth(clProto), clNull(clProto),
  clOutputStream(clProto), clPprintToplevel(clProto),
  clPrettySymbolName(clProto), clRead(clProto),
  clReadEvaluatedForm(clProto), clReportCondition(clProto),
  clRest(clProto), cl_SETF_RestartAssociatedConditions(clProto),
  clRestartAssociatedConditions(clProto), clRestartFunction(clProto),
  clRestartInteractiveFunction(clProto), clRestartName(clProto),
  clRestartP(clProto), clRestartReportFunction(clProto),
  clRestartTestFunction(clProto), clRplacd(clProto), clSearch(clProto),
  clSignal(clProto), clSimpleConditionPrinter(clProto),
  cl_SETF_SlotValue(clProto), clSlotValue(clProto),
  clStructref(clProto), cl_SETF_Structref(clProto),
  clSymbolFunction(clProto), clSymbolName(clProto), clTerpri(clProto),
  clValues(clProto), clWrap(clProto), clWrite(clProto),
  clWriteChar(clProto), clWriteString(clProto), clYOrNP(clProto),
  clZerop(clProto);

clObject cl1PLUS_FUNC(clProto), clAddInteger(clProto),
  clAddType(clProto), clAddTypeToDeclarations(clProto),
  clAppend(clProto), clApply(clProto), clAtom(clProto),
  clAugmentEnvironment(clProto), clBindingDeclarations(clProto),
  cl_SETF_BindingDeclarations(clProto),
  clBindingImplementationType(clProto), clBindingName(clProto),
  clBindingP(clProto), clBindingStatus(clProto),
  cl_SETF_BindingValue(clProto), clBindingValue(clProto),
  clBlockReturnBinding(clProto), clBoundaryEnvP(clProto),
  clBoundp(clProto), clCSymbolP(clProto),
  clCanonicalizeSpecializer(clProto), clCapturedTagBinding(clProto),
  clCapturedTagP(clProto), clCapturedVarBinding(clProto),
  clCapturedVarP(clProto), clCar(clProto), clCarEq(clProto),
  clCatchExitBinding(clProto), clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clCheckTypefs(clProto), clClassp(clProto), clCombineResults(clProto),
  clCompareTypes(clProto), clCompilerEnvFunctionWarnings(clProto),
  cl_SETF_CompilerEnvInits(clProto), clCompilerEnvInits(clProto),
  clCompilerStyleWarn(clProto), clCompilerWarn(clProto),
  clConfirmUnconfirmedTypes(clProto), clCons(clProto),
  clConsp(clProto), clCopyList(clProto), clCopyStructure(clProto),
  clDeclarationEnvP(clProto), clDefinedInP(clProto), clDelete(clProto),
  clDirtyBindingP(clProto), clEliminableFormP(clProto),
  clEliminableP(clProto), clEliminate(clProto), clEndp(clProto),
  clEnsureClass(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEnvEnv(clProto), clEnvP(clProto),
  clEq(clProto), clEql(clProto), clError(clProto), clEvery(clProto),
  clExitTargetP(clProto), clExpandType(clProto), clExtraArgs(clProto),
  clFastFind __P((clObject, clObject)), clFileCompilerEnvP(clProto),
  clFillMultipleValues(clProto), clFindClass(clProto),
  clFindIf(clProto), clFirst(clProto), clFixnump(clProto),
  clFormContainsDependent(clProto), clFourth(clProto),
  clFrameBindings(clProto), clFrameEnv(clProto), clFuncall(clProto),
  clGeInteger(clProto), clGensym(clProto), clGetBinding(clProto),
  clGetf(clProto), cl_SETF_GlobalDeclaration(clProto),
  clGlobalDeclaration(clProto), clGoTagKey(clProto),
  clImplementationType(clProto), clIntern(clProto), clKeyArg(clProto),
  clLevelStructurePrinter(clProto), clList(clProto),
  clListSTAR(clProto), clMacroFunctionEnvP(clProto),
  clMacroVariableEnvP(clProto), clMakeBlockReturn(clProto),
  clMakeDeclare(clProto), clMakeHashTable(clProto),
  clMakeKeyword(clProto), clMakeLoadFormSavingSlots(clProto),
  clMakeMultipleValuesTarget(clProto), clMakeOp(clProto),
  clMakeOp1(clProto), clMakeResult(clProto), clMakeStructure(clProto),
  clMakeSymbol(clProto), clMakeTypeSet(clProto), clMakeUnwind(clProto),
  clMakunbound(clProto), clMissingArgs(clProto),
  clMultipleValuesTargetValues(clProto),
  cl_SETF_MultipleValuesTargetValues(clProto), clNconc(clProto),
  clNot(clProto), clNull(clProto), clOutputStream(clProto),
  clPkg(clProto), clPrintUnreadableObjectHeader(clProto),
  clPrintUnreadableObjectTrailer(clProto), clProcessingError(clProto),
  clProperUnwind(clProto), clProperValue(clProto), clPutf(clProto),
  clRemoveIf(clProto), clRest(clProto), clRplaca(clProto),
  clRplacd(clProto), clRunTimeTypeCheck(clProto),
  clSafelyEliminableP(clProto), clSecond(clProto), clSet(clProto),
  clSetVariableValue(clProto), clSingletonResultP(clProto),
  clSome(clProto), clSpecialBindingP(clProto), clStatementP(clProto),
  clStatementsP(clProto), cl_SETF_Structref(clProto),
  clStructref(clProto), clSubst(clProto), clSymbolPackage(clProto),
  clSymbolp(clProto), clTarget(clProto), clTargetBinding(clProto),
  clTargetDeclarations(clProto), clTargetValue(clProto),
  clThird(clProto), clTopLevelEnvP(clProto), clTopLevelP(clProto),
  clTypeSetTypes(clProto), cl_SETF_TypeSetTypes(clProto),
  clValuesList(clProto), clVariableEnvP(clProto),
  clVariableValue(clProto), clWalk1(clProto), clWarn(clProto),
  clWarnedP(clProto), clWrite(clProto), clWriteToplevel(clProto),
  clZerop(clProto);

clObject clAddTarget(clProto), clAddTypeToDeclarations(clProto),
  clAddVariable(clProto), clAddVariables(clProto), clAppend(clProto),
  clApply(clProto), clAtom(clProto), clAugmentEnvironment(clProto),
  cl_SETF_BindingDeclarations(clProto), clBindingDeclarations(clProto),
  clBindingName(clProto), clBindingP(clProto),
  cl_SETF_BindingValue(clProto), clBindingValue(clProto),
  clBindingformInitform(clProto), clBindingformName(clProto),
  clBoundaryEnvEnclosedBindings(clProto),
  clBoundaryEnvFunctions(clProto),
  cl_SETF_BoundaryEnvFunctions(clProto), clBoundaryEnvId(clProto),
  clCanonicalizeSpecializer(clProto),
  clCapturedFunctionBinding(clProto), clCapturedFunctionP(clProto),
  clCar(clProto), clCarEq(clProto), clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clClosureValue(clProto),
  clCombineDeclarations(clProto), clCombineResults(clProto),
  cl_SETF_CompilerEnvFunctions(clProto),
  clCompilerEnvFunctions(clProto), clCompilerEnvP(clProto),
  clCompilerMacroFunction(clProto), clCompilerStyleWarn(clProto),
  clConfirmUnconfirmedTypes(clProto), clCons(clProto),
  clConsp(clProto), clCopyList(clProto), clCount(clProto),
  clDirectFunctionP(clProto), clEnclose(clProto), clEndp(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEq(clProto), clEql(clProto), clError(clProto), clExpand(clProto),
  clExpandType(clProto), clExtraArgs(clProto),
  clFastFind __P((clObject, clObject)), clFboundp(clProto),
  clFileCompilerEnvP(clProto), clFillMultipleValues(clProto),
  clFindBoundaryEnv(clProto), clFindClass(clProto),
  clFindDeclarations(clProto), clFindIf(clProto),
  clFindPackage(clProto), clFirst(clProto), clFrameBindings(clProto),
  clFrameEnv(clProto), clFtypeDecl(clProto), clFuncall(clProto),
  clFunctionInformation(clProto), clFunctionNameKey(clProto),
  clFunctionReference(clProto), clFunctionSource(clProto),
  clGetBinding(clProto), clGetSymbolMacroFunction(clProto),
  clGetf(clProto), cl_SETF_GlobalDeclaration(clProto),
  clGlobalMacroFunction(clProto), clHostFunctionP(clProto),
  clImplementationType(clProto), clIntern(clProto),
  clInterpretedCall(clProto), clKeywordp(clProto),
  clKnownType(clProto), clLambdaListKeywordP(clProto), clLast(clProto),
  clLength(clProto), clLexicalFunctionP(clProto), clList(clProto),
  clListSTAR(clProto), clListp(clProto), clLiteralConstantP(clProto),
  clMachineFunctionP(clProto), clMakeBlock(clProto),
  clMakeBoundaryEnv(clProto), clMakeCall(clProto),
  clMakeDeclare(clProto), clMakeError(clProto),
  clMakeFdefinition(clProto), clMakeFunctionReturn(clProto),
  clMakeGlobalTarget(clProto), clMakeKeyword(clProto),
  clMakeLexicalTarget(clProto), clMakeOp(clProto),
  clMakeProtected(clProto), clMakeRestart(clProto),
  clMakeResult(clProto), clMakeSymbol(clProto), clMakeTargets(clProto),
  clMakeUnwind(clProto), clMakeUsed(clProto), clMapcar(clProto),
  clMissingArgs(clProto), cl_SETF_MultipleValuesTargetValues(clProto),
  clNot(clProto), clNull(clProto), clOutputStream(clProto),
  clParseLambda(clProto), clPkg(clProto), clPrettyArguments(clProto),
  clPrintUnreadableObjectHeader(clProto),
  clPrintUnreadableObjectTrailer(clProto), clPutf(clProto),
  clRead(clProto), clReadValue(clProto), clReadVariable(clProto),
  clRest(clProto), clReturnType(clProto), clRplacd(clProto),
  clSecond(clProto), clSignalProgramError(clProto),
  clSimpleVal(clProto), clSpecialBindingP(clProto),
  clSpecialOperator(clProto), clSymbolPackage(clProto),
  clSymbolp(clProto), clTarget(clProto), clThird(clProto),
  clUnknownVariable(clProto), clUpdatedDeclarations(clProto),
  clValues(clProto), clValuesFunctionP(clProto),
  clVariableInformation(clProto), clWalk(clProto),
  clWalkArguments(clProto), clWalkBinding(clProto),
  clWalkBindings(clProto), clWalkCFunction(clProto),
  clWalkCombination(clProto), clWalkConstant(clProto),
  clWalkFuncall(clProto), clWalkGlobalCombination(clProto),
  clWalkLambda(clProto), clWalkMacro(clProto), clWalkRead(clProto),
  clWalkSequence(clProto), clWalkWrite(clProto), clWrite(clProto),
  clWriteString(clProto), clWriteToplevel(clProto),
  clWriteVariable(clProto), clZerop(clProto);

clObject clAddInitCode(clProto), clAddTarget(clProto),
  clAddTypeToDeclarations(clProto), clAddVariable(clProto),
  clAddVariables(clProto), clAppend(clProto), clAssignmentP(clProto),
  clAssignmentValue(clProto), clAtom(clProto),
  clAugmentEnvironment(clProto), cl_SETF_BindingDeclarations(clProto),
  clBindingDeclarations(clProto), clBindingName(clProto),
  clBindingStatus(clProto), clBindingValue(clProto),
  clBindingformInitform(clProto), clBindingformName(clProto),
  cl_SETF_BoundaryEnvBindings(clProto), clBoundaryEnvBindings(clProto),
  clCadar(clProto), clCaddar(clProto), clCapturedBlockP(clProto),
  clCar(clProto), clCarEq(clProto), clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)),
  clCombineDeclarations(clProto), clCombineManyResults(clProto),
  clCombineResults(clProto), cl_SETF_CompilerEnvFunctions(clProto),
  clCompilerEnvFunctions(clProto), clCompilerEnvP(clProto),
  clCons(clProto), clConsp(clProto), clConstantp(clProto),
  clControlInformation(clProto), clCopyList(clProto),
  clEnclose(clProto), clEndp(clProto), clEq(clProto), clEql(clProto),
  clError(clProto), clEvalEnv(clProto), clExpandType(clProto),
  clExtraArgs(clProto), clFastFind __P((clObject, clObject)),
  clFileCompilerEnvP(clProto), clFindBoundaryEnv(clProto),
  clFindDeclarations(clProto), clFindIf(clProto), clFirst(clProto),
  clFletLabels(clProto), clFrameBindings(clProto), clFuncall(clProto),
  clFunctionInformation(clProto), clFunctionNameKey(clProto),
  clFunctionReference(clProto), clGensym(clProto),
  clGetBinding(clProto), clGetf(clProto),
  cl_SETF_GlobalDeclaration(clProto), clGoTagKey(clProto),
  clGoTagP(clProto), clIndexBinding(clProto), clIndexTag(clProto),
  clIntegerp(clProto), clInterpretedCall(clProto),
  clInterpretedCatch(clProto), clKnownType(clProto), clLast(clProto),
  clList(clProto), clListSTAR(clProto), cl_SETF_MacroFunction(clProto),
  clMakeBlock(clProto), clMakeBlockEnv(clProto),
  clMakeBlockReturn(clProto), clMakeCatchExit(clProto),
  clMakeCatchTagTarget(clProto), clMakeConstantTarget(clProto),
  clMakeControlEnv(clProto), clMakeGlobalTarget(clProto),
  clMakeGoExit(clProto), clMakeGoTag(clProto), clMakeKeyword(clProto),
  clMakeLexicalTarget(clProto), clMakeMultipleValuesTarget(clProto),
  clMakeNamedBlock(clProto), clMakeOp(clProto),
  clMakeProtected(clProto), clMakeResult(clProto),
  clMakeSymbol(clProto), clMakeTag(clProto), clMakeTagblock(clProto),
  clMakeTagbodyEnv(clProto), clMakeTargets(clProto),
  clMakeTopLevelEnv(clProto), clMakeUnwind(clProto),
  clMakeValuesBuffer(clProto), clMakeValuesEnv(clProto),
  clMakeVariableEnv(clProto), clMapcar(clProto), clMemberIf(clProto),
  clMissingArgs(clProto), clMultipleValuesTargetValues(clProto),
  clMvpDIVProtect(clProto), clNamedBlockEvalTargets(clProto),
  clNot(clProto), clNull(clProto), clParseMacro(clProto),
  clPlusp(clProto), clPutf(clProto), clReadValue(clProto),
  clRemoveIf(clProto), clRest(clProto), clRetainValuesTarget(clProto),
  clReturnType(clProto), clRplaca(clProto), clRplacd(clProto),
  clSecond(clProto), cl_SETF_SpecialOperator(clProto),
  clStatementsP(clProto), clSymbolp(clProto), clTagQUESTION(clProto),
  clTarget(clProto), clTargetSpecial(clProto), clTargetValue(clProto),
  clTopLevelP(clProto), clUpdatedDeclarations(clProto),
  clVariableValue(clProto), clWalk(clProto), clWalkAssignment(clProto),
  clWalkBinding(clProto), clWalkBindings(clProto),
  clWalkConstant(clProto), clWalkExit(clProto), clWalkFuncall(clProto),
  clWalkFunctionDefinition(clProto), clWalkSavedValue(clProto),
  clWalkSequence(clProto), clWalkTag(clProto), clWarnUnused(clProto),
  clWarnUsed(clProto), clZerop(clProto);

clObject clAbstractStructureClassP(clProto), clCerror(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCons(clProto),
  clDerivedTypeP(clProto), clError(clProto), clExtraArgs(clProto),
  cl_SETF_FindType(clProto), clFindType(clProto),
  clMissingArgs(clProto), clNot(clProto);

clObject cl1PLUS_FUNC(clProto), cl1MINUS_FUNC(clProto),
  clApply(clProto), clCanonicalizeSpecializer(clProto), clCar(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCheckKeys(clProto), clComplement(clProto), clCons(clProto),
  clEndp(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clExtraArgs(clProto), clFindClass(clProto),
  clFuncall(clProto), clItemPredicate(clProto),
  clItemlessPredicate(clProto), clKeyArg(clProto), clKeyItem(clProto),
  clList(clProto), clListSTAR(clProto), cl_SETF_MacroFunction(clProto),
  clMakeKeyword(clProto), clMissingArgs(clProto), clNot(clProto),
  clNreverseList(clProto), clNthcdr(clProto), clNull(clProto),
  clPlusp(clProto), clRest(clProto), clReverseSubList(clProto),
  clRplacd(clProto);

clObject cl1PLUS_FUNC(clProto), cl1MINUS_FUNC(clProto),
  clApply(clProto), clBindingformName(clProto), clCar(clProto),
  clCarEq(clProto), clCdr(clProto), clCeiling(clProto),
  clCharCode(clProto), clCharacter(clProto), clCharacterp(clProto),
  clCharpSimpleBaseString __P((clCharp)), clClassOf(clProto),
  clClassp(clProto), clCoerce(clProto), clCoerceToSequence1(clProto),
  clComplementedPairP(clProto), clComplex(clProto), clCons(clProto),
  clConsp(clProto), clDerivedTypeP(clProto),
  clDoubleDoubleFloat __P((double)), clDoubleSingleFloat __P((double)),
  clElementVectorType(clProto), clEnclose(clProto), clEndp(clProto),
  clEnsureDeftype(clProto), clEq(clProto), clError(clProto),
  clExpandDeftype(clProto), clExpandDeftype1(clProto),
  clExpandType(clProto), clExtraArgs(clProto), clFboundp(clProto),
  clFindType(clProto), clFirst(clProto), clFloat(clProto),
  clFloatLimit(clProto), clFloor(clProto), clFuncall(clProto),
  clIntegerizeLimit(clProto), clInternArrayType(clProto),
  clInternComplexType(clProto), clInternConsType(clProto),
  clInternEqlSpecializer(clProto), clInternEqlSpecializer1(clProto),
  clInternFunctionType(clProto), clInternNumericType(clProto),
  clInternTypePredicate(clProto), clInternTypeUnion(clProto),
  clInternValuesType(clProto), clIntersectTypes(clProto),
  clKeywordp(clProto), clList(clProto), clListSTAR(clProto),
  clListp(clProto), clMacroFunctionP(clProto),
  clMakeForwardReferencedClass(clProto), clMakeKeyword(clProto),
  clMakeList(clProto), clMapcar(clProto), clMissingArgs(clProto),
  clNot(clProto), clNull(clProto), clOptionType(clProto),
  clProperName(clProto), clRationalize(clProto),
  clRationalizeLimit(clProto), clRealp(clProto), clRest(clProto),
  clStandardCharP(clProto), clUnionTypes(clProto),
  clUpgradedArrayElementType(clProto),
  clUpgradedComplexPartType(clProto);

clObject cl1MINUS_FUNC(clProto), clAmbiguousSubtypep(clProto),
  clApply(clProto), clArrayDimensions(clProto), clAsh(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharCode(clProto), clCharpSimpleBaseString __P((clCharp)),
  clClassp(clProto), clCodeChar(clProto), clCombineComplement(clProto),
  clCons(clProto), clConsp(clProto), clDimensionsMatchP(clProto),
  clElementVectorType(clProto), clEndp(clProto),
  clEnsureClass(clProto), clEnsureDeftype(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEq(clProto), clEql(clProto), clEqlSpecializerObject(clProto),
  clExpandType(clProto), clExtraArgs(clProto), clFindClass(clProto),
  clFindType(clProto), clFirst(clProto), clFuncall(clProto),
  clIllegalDiscriminationError(clProto), clInternConsType(clProto),
  clInternNumericType(clProto), clInternTypeComplement(clProto),
  clInternTypeIntersection(clProto), clInternTypeUnion(clProto),
  clIntersectTypes(clProto), clLength(clProto), clList(clProto),
  clListSTAR(clProto), clListp(clProto), clMakeKeyword(clProto),
  clMapcar(clProto), clMax(clProto), clMeetsHigh(clProto),
  clMeetsLow(clProto), clMin(clProto), clMissingArgs(clProto),
  clNewLimit(clProto), clNot(clProto), clNull(clProto),
  clOutputStream(clProto), clPrintUnreadableObjectHeader(clProto),
  clPrintUnreadableObjectTrailer(clProto), clRest(clProto),
  clRplacd(clProto), clSecond(clProto), clSome(clProto),
  clSubclassp(clProto), clSymbolName(clProto), clUnionTypes(clProto),
  clValues(clProto);

clObject cl1PLUS_FUNC(clProto), cl1MINUS_FUNC(clProto),
  clAcosComplex(clProto), clAcos1DoubleFloat __P((clObject)),
  clAcos1Integer __P((clObject)), clAcos1Ratio __P((clObject)),
  clAcos1SingleFloat __P((clObject)), clAcoshComplex(clProto),
  clAcosh1DoubleFloat __P((clObject)), clAcosh1Integer __P((clObject)),
  clAcosh1Ratio __P((clObject)), clAcosh1SingleFloat __P((clObject)),
  clApply(clProto), clAsinComplex(clProto),
  clAsin1DoubleFloat __P((clObject)), clAsin1Integer __P((clObject)),
  clAsin1Ratio __P((clObject)), clAsin1SingleFloat __P((clObject)),
  clAsinhComplex(clProto), clAsinhDoubleFloat __P((clObject)),
  clAsinhInteger __P((clObject)), clAsinhRatio __P((clObject)),
  clAsinhSingleFloat __P((clObject)), clAtan(clProto),
  clAtan1Complex(clProto), clAtan1DoubleFloat __P((clObject)),
  clAtan1Integer __P((clObject)), clAtan1Ratio __P((clObject)),
  clAtan1SingleFloat __P((clObject)),
  clAtan2DoubleFloatDoubleFloat __P((clObject, clObject)),
  clAtan2DoubleFloatInteger __P((clObject, clObject)),
  clAtan2DoubleFloatRatio __P((clObject, clObject)),
  clAtan2DoubleFloatSingleFloat __P((clObject, clObject)),
  clAtan2IntegerDoubleFloat __P((clObject, clObject)),
  clAtan2IntegerInteger __P((clObject, clObject)),
  clAtan2IntegerRatio __P((clObject, clObject)),
  clAtan2IntegerSingleFloat __P((clObject, clObject)),
  clAtan2RatioDoubleFloat __P((clObject, clObject)),
  clAtan2RatioInteger __P((clObject, clObject)),
  clAtan2RatioRatio __P((clObject, clObject)),
  clAtan2RatioSingleFloat __P((clObject, clObject)),
  clAtan2SingleFloatDoubleFloat __P((clObject, clObject)),
  clAtan2SingleFloatInteger __P((clObject, clObject)),
  clAtan2SingleFloatRatio __P((clObject, clObject)),
  clAtan2SingleFloatSingleFloat __P((clObject, clObject)),
  clAtanhComplex(clProto), clAtanh1DoubleFloat __P((clObject)),
  clAtanh1Integer __P((clObject)), clAtanh1Ratio __P((clObject)),
  clAtanh1SingleFloat __P((clObject)),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clComplex(clProto),
  clCons(clProto), clCosComplex(clProto),
  clCosDoubleFloat __P((clObject)), clCosInteger __P((clObject)),
  clCosRatio __P((clObject)), clCosSingleFloat __P((clObject)),
  clCoshComplex(clProto), clCoshDoubleFloat __P((clObject)),
  clCoshInteger __P((clObject)), clCoshRatio __P((clObject)),
  clCoshSingleFloat __P((clObject)), clDoubleDoubleFloat __P((double)),
  clDoubleSingleFloat __P((double)), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clExtraArgs(clProto), clFindClass(clProto),
  clISTAR_FUNC(clProto), clList(clProto), clLog(clProto),
  clMakeComplex __P((clObject, clObject)), clMakeKeyword(clProto),
  clMinusp(clProto), clMissingArgs(clProto), clNot(clProto),
  clNull(clProto), clRest(clProto), clSinComplex(clProto),
  clSinDoubleFloat __P((clObject)), clSinInteger __P((clObject)),
  clSinRatio __P((clObject)), clSinSingleFloat __P((clObject)),
  clSinhComplex(clProto), clSinhDoubleFloat __P((clObject)),
  clSinhInteger __P((clObject)), clSinhRatio __P((clObject)),
  clSinhSingleFloat __P((clObject)), clTanComplex(clProto),
  clTanDoubleFloat __P((clObject)), clTanInteger __P((clObject)),
  clTanRatio __P((clObject)), clTanSingleFloat __P((clObject)),
  clTanhComplex(clProto), clTanhDoubleFloat __P((clObject)),
  clTanhInteger __P((clObject)), clTanhRatio __P((clObject)),
  clTanhSingleFloat __P((clObject)), clZerop(clProto), clZroot(clProto);

clObject clApply(clProto), clAssoc(clProto), clAtom(clProto),
  clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clCons(clProto), clConsp(clProto), clCopyTree(clProto),
  clEq(clProto), clExtraArgs(clProto), clFuncall(clProto),
  clKeyArg(clProto), clMakeKeyword(clProto), clMissingArgs(clProto),
  clNot(clProto), clNull(clProto), clRplaca(clProto),
  clRplacd(clProto), clSatisfiesTheTest(clProto), clSubst1(clProto);

clObject clCanonicalizeClass(clProto), clCar(clProto), clCdr(clProto),
  clEndp(clProto), clList(clProto), clMapcar(clProto),
  clMissingArgs(clProto), clPrint(clProto), clRplacd(clProto);

clObject cl1PLUS_FUNC(clProto), clAtom(clProto), clCadr(clProto),
  clCar(clProto), clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clConcatenate(clProto),
  clCons(clProto), clCopyList(clProto), clEndp(clProto), clEq(clProto),
  clError(clProto), clExtraArgs(clProto), clGenstring(clProto),
  clGensym(clProto), clGetf(clProto),
  cl_SETF_GlobalDeclaration(clProto), clIntegerp(clProto),
  clIntern(clProto), clListSTAR(clProto), clMakeKeyword(clProto),
  clMakeSymbol(clProto), clMapcar(clProto), clMissingArgs(clProto),
  clNot(clProto), clPrincToString(clProto), clPutf(clProto),
  clRplaca(clProto), clRplacd(clProto), clSet(clProto),
  clSetSymbolPlist __P((clObject, clObject)), clString(clProto),
  clStringp(clProto), cl_SETF_SymbolFunction(clProto),
  clSymbolFunction(clProto), clSymbolName(clProto),
  clSymbolPlist(clProto), clSymbolp(clProto), clValues(clProto);

clObject clDIVEQUAL_FUNC(clProto), cl1PLUS_FUNC(clProto),
  clAddInteger(clProto), clApply(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCarEq(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clClassOf(clProto), clClassp(clProto), clConcatenateNames(clProto),
  clCons(clProto), clEndp(clProto), clEnsureClass(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEq(clProto), clError(clProto), clExpandType(clProto),
  clExtraArgs(clProto), clFastFind __P((clObject, clObject)),
  clFastFindSlot __P((clObject, clObject)), clFindClass(clProto),
  clFindType(clProto), clFirst(clProto), clFuncall(clProto),
  clGeInteger(clProto), clGensym(clProto), clGetf(clProto),
  clKeyNotAllowed(clProto), clLength(clProto), clList(clProto),
  clMakeDirectSlotDefinition(clProto),
  clMakeEffectiveSlotDefinition(clProto),
  clMakeEmptyStructure(clProto), clMakeHiddenSlot(clProto),
  clMakeKeyword(clProto),
  clMakeStandardInstance __P((clObject, clObject, clObject)),
  clMakeSymbol(clProto), clMissingArgs(clProto), clNot(clProto),
  clNull(clProto), clProperName(clProto), clRest(clProto),
  clRplacd(clProto), clSecond(clProto), clSignalProgramError(clProto),
  cl_SETF_SlotValue(clProto), clStandardInstanceAccess(clProto),
  cl_SETF_Structref(clProto), clStructref(clProto),
  clUpdateInstance(clProto);

clObject clAddDefstructOption(clProto), clAppend(clProto),
  clApply(clProto), clAtom(clProto), clBindingformName(clProto),
  clCanonicalizeDefstructOptions(clProto),
  clCanonicalizeDefstructSlotSpecifications(clProto), clCar(clProto),
  clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clClassOf(clProto), clCons(clProto), clConsp(clProto),
  clCopyList(clProto), clCopyTree(clProto), clDefstructOption(clProto),
  clEndp(clProto), clEq(clProto), clEql(clProto), clError(clProto),
  clExtraArgs(clProto), clFastFindSlot __P((clObject, clObject)),
  clFindLambdaVar(clProto), clFirst(clProto), clFuncall(clProto),
  clGenerateDefstructAccessors(clProto),
  clGenerateDefstructConstructors(clProto),
  clGenerateDefstructFunctions(clProto), clGensym(clProto),
  clGetf(clProto), cl_SETF_GlobalDeclaration(clProto),
  clKeyArg(clProto), clLast(clProto), clLength(clProto),
  clList(clProto), clListSTAR(clProto), cl_SETF_MacroFunction(clProto),
  clMakeBoaConstructor(clProto), clMakeConstructor(clProto),
  clMakeHashTable(clProto), clMakeKeyword(clProto),
  clMakeKeywordConstructor(clProto), clMakeName(clProto),
  clMakeStandardStructureConstructorName(clProto),
  clMakeSymbol(clProto), clMapcar(clProto), clMissingArgs(clProto),
  clMultipleAppearanceError(clProto), clNot(clProto), clNull(clProto),
  clRest(clProto), clRplaca(clProto), clRplacd(clProto),
  clSecond(clProto), clSignalProgramError(clProto),
  clSimpleDefstructOption(clProto), clStringp(clProto),
  clSymbolName(clProto), clSymbolp(clProto);

clObject clPLUS_FUNC(clProto), clDIVEQUAL_FUNC(clProto),
  cl1PLUS_FUNC(clProto), cl1MINUS_FUNC(clProto), clAddInteger(clProto),
  clAlphanumericp(clProto), clApply(clProto), clBaseSchar(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharDowncase(clProto), clCharUpcase(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckBothBounds(clProto),
  clCheckKeys(clProto), clCheckSimpleIndex(clProto), clCons(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEq(clProto), clError(clProto), clExtendedSchar(clProto),
  clExtraArgs(clProto), clFastAref(clProto),
  clFastFind __P((clObject, clObject)), clFind(clProto),
  clFindClass(clProto), clFuncall(clProto), clGeInteger(clProto),
  clInitializeVector(clProto), clKeyArg(clProto), clLength(clProto),
  clList(clProto), clMakeKeyword(clProto), clMakeString(clProto),
  clMin(clProto), clMissingArgs(clProto), clNot(clProto),
  clNull(clProto), clRest(clProto), clSetBaseSchar(clProto),
  clSetExtendedSchar(clProto), clString(clProto),
  clStringEqual(clProto), clStringEQUAL(clProto),
  clSymbolName(clProto), clWriteChar(clProto), clWriteString(clProto);

clObject clMINUS_FUNC(clProto), cl1PLUS_FUNC(clProto),
  cl1MINUS_FUNC(clProto), clAddInteger(clProto),
  clAdjustArray(clProto), clAllocateResource(clProto),
  clApply(clProto), clAtom(clProto), clBoundp(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharEQUAL(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCheckKeys(clProto), clClassOf(clProto), clConcatenate(clProto),
  clCons(clProto), clDeallocateResource(clProto),
  clDeleteDuplicates(clProto), clEndp(clProto), clEnsureClass(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEofProcess(clProto), clEq(clProto), clError(clProto),
  clExtension(clProto), clExtraArgs(clProto),
  clFastFindSlot __P((clObject, clObject)),
  cl_SETF_FillPointer(clProto), clFillPointer(clProto),
  clFindClass(clProto), clFindType(clProto), clGeInteger(clProto),
  cl_SETF_Get(clProto), clGetResourceParameters(clProto),
  clGetSimpleVector(clProto), cl_SETF_GlobalDeclaration(clProto),
  clInputStream(clProto), clKeyArg(clProto), clLength(clProto),
  clList(clProto), clMakeArray(clProto), clMakeBuffer(clProto),
  clMakeKeyword(clProto), clMakeResource(clProto), clMapcar(clProto),
  clMax(clProto), clMin(clProto), clMissingArgs(clProto),
  clNot(clProto), clNull(clProto), clOutputStream(clProto),
  clPosition(clProto), cl_SETF_ResourceParameters(clProto),
  clResourceParameters(clProto), clRest(clProto), clRplaca(clProto),
  clSlotBoundp(clProto), cl_SETF_SlotValue(clProto), clSort(clProto),
  clValues(clProto), clVectorPushExtend(clProto),
  clWhitespaceCharP(clProto), clZerop(clProto);

clObject cl1PLUS_FUNC(clProto), cl1MINUS_FUNC(clProto),
  clApply(clProto), clAref(clProto), cl_SETF_Aref(clProto),
  clCanonicalizeSequenceTypeSpecifier(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clCheckTypef(clProto), clCompare(clProto), clCons(clProto),
  clConsp(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clEql(clProto),
  clExpandType(clProto), clExtraArgs(clProto), clFindClass(clProto),
  clFirst(clProto), clKeyArg(clProto), clLast(clProto),
  clLength(clProto), clList(clProto), clListMerge(clProto),
  clListMergesort(clProto), clListp(clProto), clMakeKeyword(clProto),
  clMakeVector(clProto), clMissingArgs(clProto), clNot(clProto),
  clNthcdr(clProto), clNull(clProto), clQuicksortList(clProto),
  clQuicksortVector(clProto), clRest(clProto), clRplacd(clProto),
  clSecond(clProto), clSplit1(clProto), clSplit2(clProto),
  clValues(clProto);

clObject clAtom(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clCons(clProto), clEndp(clProto), clEql(clProto),
  clExtraArgs(clProto), clFuncall(clProto), clKeyArg(clProto),
  clMakeKeyword(clProto), clMember1(clProto), clMissingArgs(clProto),
  clNot(clProto), clNull(clProto), clRplacd(clProto),
  clSatisfiesTheTest(clProto);

clObject clPLUS_FUNC(clProto), cl1PLUS_FUNC(clProto),
  cl1MINUS_FUNC(clProto), clAddInteger(clProto),
  clAdjustArray(clProto), clAdvanceMultiIterators(clProto),
  clAppend(clProto), clApply(clProto), clAtom(clProto),
  clBaseSchar(clProto), clCanonicalizeSequenceTypeSpecifier(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckBothBounds(clProto),
  clCheckBounds(clProto), clCheckComplexIndex(clProto),
  clCheckIndex(clProto), clCheckKeys(clProto), clCheckTypef(clProto),
  clCoerceToSequence1(clProto), clCons(clProto), clConsp(clProto),
  clEndp(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clEql(clProto),
  clError(clProto), clExpandType(clProto), clExtendedSchar(clProto),
  clExtraArgs(clProto), clFastAref(clProto),
  clFastFind __P((clObject, clObject)), clFastSetAref(clProto),
  cl_SETF_FillPointer(clProto), clFillPointer(clProto),
  clFindClass(clProto), clFinishedMultiIterators(clProto),
  clFirst(clProto), clFuncall(clProto), clGeInteger(clProto),
  clGensym(clProto), clGetMultiIterators(clProto),
  clGetSimpleVector(clProto), clInitializeVector(clProto),
  clIntegerIndex __P((clObject)), clKeyArg(clProto),
  clKeyItem(clProto), clLength(clProto), clList(clProto),
  clListSTAR(clProto), clListLength(clProto), clListp(clProto),
  cl_SETF_MacroFunction(clProto), clMakeArray(clProto),
  clMakeBaseCharVector __P((clObject)),
  clMakeExtendedCharVector __P((clObject)), clMakeKeyword(clProto),
  clMakeList(clProto), clMakeVector(clProto), clMissingArgs(clProto),
  clMultiIteratorElts(clProto), clNot(clProto), clNthcdr(clProto),
  clNull(clProto), clOutOfBoundsError(clProto), clRest(clProto),
  clReverseSubList(clProto), clRplaca(clProto), clRplacd(clProto),
  clSbvref(clProto), clSecond(clProto), clSequenceResult(clProto),
  clSetBaseSchar(clProto), clSetExtendedSchar(clProto),
  clSetSbvref(clProto), clSvref(clProto), cl_SETF_Svref(clProto),
  clTrimVector(clProto), clValues(clProto);

clObject clPLUS_FUNC(clProto), cl1PLUS_FUNC(clProto),
  cl1MINUS_FUNC(clProto), clApply(clProto), clAtom(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckBothBounds(clProto),
  clCheckKeys(clProto), clComplement(clProto), clCons(clProto),
  clEndp(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clExtraArgs(clProto),
  clFastAref(clProto), clFastFind __P((clObject, clObject)),
  clFastSetAref(clProto), clFindClass(clProto), clFuncall(clProto),
  clItemPredicate(clProto), clItemlessPredicate(clProto),
  clKeyArg(clProto), clKeyItem(clProto), clLength(clProto),
  clList(clProto), clMakeKeyword(clProto), clMakeVector(clProto),
  clMin(clProto), clMissingArgs(clProto), clNot(clProto),
  clNthcdr(clProto), clNull(clProto), clPlusp(clProto),
  clRest(clProto), clReverseSubList(clProto), clRplaca(clProto),
  clRplacd(clProto), clTrimVector(clProto);

clObject clPLUS_FUNC(clProto), cl1PLUS_FUNC(clProto),
  cl1MINUS_FUNC(clProto), clApply(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckBothBounds(clProto),
  clCheckKeys(clProto), clComplement(clProto), clCons(clProto),
  clEndp(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clExtraArgs(clProto), clFastAref(clProto),
  clFastFind __P((clObject, clObject)), clFindClass(clProto),
  clFuncall(clProto), clItemPredicate(clProto),
  clItemlessPredicate(clProto), clKeyArg(clProto), clKeyItem(clProto),
  clLength(clProto), clList(clProto), clListSTAR(clProto),
  cl_SETF_MacroFunction(clProto), clMakeKeyword(clProto),
  clMismatch(clProto), clMissingArgs(clProto), clNot(clProto),
  clNthcdr(clProto), clNull(clProto), clRest(clProto),
  clReverseSubList(clProto);

clObject clApply(clProto), clAssoc(clProto),
  clBindingformName(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clCons(clProto), clConsp(clProto), clDelete(clProto),
  clEndp(clProto), clError(clProto), clExtraArgs(clProto),
  clFindResource(clProto), clFuncall(clProto), clGet(clProto),
  clGetResourceParameters(clProto), clKeyArg(clProto),
  clLambdaListKeywordP(clProto), clList(clProto),
  clMakeKeyword(clProto), clMakeStructure(clProto),
  clMissingArgs(clProto), clNot(clProto),
  clResourceConstructor(clProto), clResourceDeinitializer(clProto),
  clResourceInUse(clProto), cl_SETF_ResourceInUse(clProto),
  clResourceInitializer(clProto), clResourceMatcher(clProto),
  cl_SETF_ResourceParameters(clProto), clResourceParameters(clProto),
  clResourcePool(clProto), cl_SETF_ResourcePool(clProto),
  clRplacd(clProto), clSecond(clProto), cl_SETF_Structref(clProto),
  clStructref(clProto), clThird(clProto);

clObject clSTAR_FUNC(clProto), clDIVEQUAL_FUNC(clProto),
  cl1PLUS_FUNC(clProto), cl1MINUS_FUNC(clProto), clAcons(clProto),
  clAddInteger(clProto), clAllocateResource(clProto),
  clAppend(clProto), clApply(clProto), clAssoc(clProto),
  clAtom(clProto), clBadReaderParameter(clProto), clBoundp(clProto),
  clBqAttachAppend(clProto), clBqAttachConses(clProto),
  clBqCompletelyProcess(clProto), clBqFrob(clProto),
  clBqProcess(clProto), clBqRemoveTokens(clProto),
  clBqSimplify(clProto), clBqSimplifyArgs(clProto),
  clBqSplicingFrob(clProto), clBracket(clProto), clCaadar(clProto),
  clCaar(clProto), clCadar(clProto), clCadr(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdar(clProto),
  clCddar(clProto), clCdddr(clProto), clCddr(clProto), clCdr(clProto),
  clCharDowncase(clProto), clCharUpcase(clProto), clCharEQUAL(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clCircleSubst(clProto), clClassOf(clProto), clClassp(clProto),
  clCoerce(clProto), clCons(clProto), clConsp(clProto),
  clCopyHashTable(clProto), clCopyReadtable(clProto),
  clDeallocateResource(clProto), clDigitCharP(clProto),
  clDoubleDoubleFloat __P((double)), clDoubleSingleFloat __P((double)),
  clEndp(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clEql(clProto),
  clError(clProto), clEvalFeature(clProto), clEvery(clProto),
  clExpandType(clProto), clExtraArgs(clProto),
  clFastFind __P((clObject, clObject)), clFeatureReader(clProto),
  cl_SETF_FillPointer(clProto), clFind(clProto), clFindClass(clProto),
  clFindPackage(clProto), clFindSymbol(clProto), clFuncall(clProto),
  clGeInteger(clProto), clGensym(clProto),
  clGetCharacterSyntax(clProto), clGetDispatchMacroCharacter(clProto),
  clGetDispatchTable(clProto), clGetMacroCharacter(clProto),
  clGetStringAccumulator(clProto), clGetTokenBuffer(clProto),
  cl_SETF_GlobalDeclaration(clProto), clIllegalCharacter(clProto),
  clIntern(clProto), clKeyArg(clProto), clLast(clProto),
  clLeadingStringEqual(clProto), clLeadingStringEQUAL(clProto),
  clLength(clProto), clList(clProto), clListSTAR(clProto),
  clLowerCaseP(clProto), cl_SETF_MacroFunction(clProto),
  clMakeArray(clProto), clMakeDispatchMacroCharacter(clProto),
  clMakeHashTable(clProto), clMakeKeyword(clProto),
  clMakeReadtable(clProto),
  clMakeStandardStructureConstructorName(clProto),
  clMakeStructure(clProto), clMakeSymbol(clProto), clMap(clProto),
  clMapcar(clProto), clMaptree(clProto), clMax(clProto),
  clMissingArgs(clProto), clNameChar(clProto), clNconc(clProto),
  clNot(clProto), clNotany(clProto), clNreconc(clProto),
  clNull(clProto), clNullOrQuoted(clProto), clOutputStream(clProto),
  clParseFloat(clProto), clParseInteger(clProto),
  clParseNamestring(clProto), clPeekChar(clProto), clPlusp(clProto),
  clPrintUnreadableObjectHeader(clProto),
  clPrintUnreadableObjectTrailer(clProto), clRadixReader(clProto),
  clRead(clProto), clReadChar(clProto), clReadDelimitedList(clProto),
  clReadError(clProto), clReadList(clProto),
  clReadPreservingWhitespace(clProto), clReadToken(clProto),
  clReader(clProto), clReadtableCase(clProto),
  cl_SETF_ReadtableCase(clProto), clReadtableDispatchTables(clProto),
  cl_SETF_ReadtableDispatchTables(clProto), clReadtableMacros(clProto),
  cl_SETF_ReadtableMacros(clProto), cl_SETF_ReadtableParse(clProto),
  clReadtableParse(clProto), clReadtableSyntax(clProto),
  cl_SETF_ReadtableSyntax(clProto), clRest(clProto), clRplaca(clProto),
  clRplacd(clProto), cl_SETF_Sbit(clProto), clSbit(clProto),
  clSetCharBit(clProto), clSetCharacterSyntax(clProto),
  clSetDispatchMacroCharacter(clProto), clSetDispatchTable(clProto),
  clSetMacroCharacter(clProto), clSetMacroCharacter1(clProto),
  clSetSyntaxFromChar(clProto), clSethash(clProto), clSome(clProto),
  clStringp(clProto), clStructref(clProto), cl_SETF_Structref(clProto),
  clSymbolFunction(clProto), clThird(clProto), clUnreadChar(clProto),
  clUpperCaseP(clProto), clValues(clProto),
  clVectorPushExtend(clProto), clWarn(clProto),
  clWhitespaceCharP(clProto), clXor(clProto), clZerop(clProto);

clObject clMINUS_FUNC(clProto), cl1PLUS_FUNC(clProto),
  cl1MINUS_FUNC(clProto), clAddInteger(clProto), clApply(clProto),
  clAsh(clProto), clBoundp(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clClassp(clProto),
  clCons(clProto), clDoubleDoubleFloat __P((double)),
  clDoubleSingleFloat __P((double)), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clError(clProto),
  clExpandType(clProto), clExtraArgs(clProto), clFindClass(clProto),
  clFloat(clProto), clGeInteger(clProto), clGetUniversalTime(clProto),
  cl_SETF_GlobalDeclaration(clProto), clIntegerLength(clProto),
  clList(clProto), clLogand(clProto), clLogxor(clProto),
  clMakeArray(clProto), clMakeKeyword(clProto),
  clMakeLoadFormSavingSlots(clProto), clMakeRandomState(clProto),
  clMakeStructure(clProto), clMakeSymbol(clProto), clMinusp(clProto),
  clMissingArgs(clProto), clNot(clProto), clNull(clProto),
  clRandomChunk(clProto), cl_SETF_RandomStateJ(clProto),
  clRandomStateJ(clProto), cl_SETF_RandomStateK(clProto),
  clRandomStateK(clProto), clRandomStateSeed(clProto),
  clRedefineConstant(clProto), clRest(clProto),
  cl_SETF_Structref(clProto), clStructref(clProto), clSvref(clProto),
  cl_SETF_Svref(clProto);

clObject clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clCons(clProto), clConsp(clProto), clEq(clProto),
  clExtraArgs(clProto), clFirst(clProto), clGensym(clProto),
  clKeyArg(clProto), clList(clProto), clListSTAR(clProto),
  clListp(clProto), cl_SETF_MacroFunction(clProto),
  clMakeKeyword(clProto), clMakeSymbol(clProto),
  clMissingArgs(clProto), clNot(clProto), clSecond(clProto),
  clSignalProgramError(clProto), clSymbolName(clProto),
  clSymbolp(clProto), clValues(clProto), clWarn(clProto);

clObject clAllocateResource(clProto), clApply(clProto),
  clAtomicp(clProto), clBoundp(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clCons(clProto), clConsp(clProto), clDeallocateResource(clProto),
  clDispatchingPrint(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clError(clProto), clExtraArgs(clProto),
  clFindClass(clProto), clForceOutput(clProto), clFreshLine(clProto),
  clFuncall(clProto), clGetOutputStreamString(clProto),
  clGetPrinter(clProto), cl_SETF_GlobalDeclaration(clProto),
  clIntInteger __P((int)), clKeyArg(clProto), clList(clProto),
  clListSTAR(clProto), cl_SETF_MacroFunction(clProto),
  clMakeHandler(clProto), clMakeKeyword(clProto),
  clMakeSymbol(clProto), clMissingArgs(clProto), clNot(clProto),
  clNull(clProto), clOutputStream(clProto), clPrin1(clProto),
  clPrinc(clProto), clPrintObjectAbortedP(clProto),
  clPrintUnreadableObjectHeader(clProto),
  clPrintUnreadableObjectTrailer(clProto), clReadLine(clProto),
  clRest(clProto), clStringEqual(clProto), clTerpri(clProto),
  clValues(clProto), clWrite(clProto), clWriteChar(clProto),
  clWriteString(clProto), clWriteToplevel(clProto);

clObject clSTAR_FUNC(clProto), clDIV_FUNC(clProto),
  clDIVEQUAL_FUNC(clProto), cl1PLUS_FUNC(clProto),
  cl1MINUS_FUNC(clProto), clAddInteger(clProto), clAlphaCharP(clProto),
  clAlphanumericp(clProto), clApply(clProto), clAref(clProto),
  cl_SETF_Aref(clProto), clAsh(clProto), clBignumPrintAux(clProto),
  clBoundp(clProto), clCanonicalizeSpecializer(clProto),
  clCar(clProto), clCdr(clProto), clCeiling(clProto),
  clCharBit(clProto), clCharDowncase(clProto), clCharName(clProto),
  clCharUpcase(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCoerce(clProto), clCons(clProto), clDigitChar(clProto),
  clDigitCharP(clProto), clDoubleDoubleFloat __P((double)),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEq(clProto), clEql(clProto), clError(clProto),
  clEscapeCharP(clProto), clExtraArgs(clProto),
  cl_SETF_FillPointer(clProto), clFind(clProto), clFindClass(clProto),
  clFindSymbol(clProto), clFindType(clProto), clFixnump(clProto),
  clFloat(clProto), clFloatDenormalizedP(clProto),
  clFloatString(clProto), clFlonumToString(clProto),
  clFormatGroupedInteger(clProto), clFormatMethod(clProto),
  clFuncall(clProto), clGeInteger(clProto),
  clGetCharacterSyntax(clProto), cl_SETF_GlobalDeclaration(clProto),
  clGraphicCharP(clProto), clIntegerDecodeFloat(clProto),
  clKeywordp(clProto), clLength(clProto), clList(clProto),
  clLog(clProto), clMakeArray(clProto), clMakeKeyword(clProto),
  clMakeRatio __P((clObject, clObject)), clMakeString(clProto),
  clMakeStructureKeylist(clProto), clMapcar(clProto), clMax(clProto),
  clMinusp(clProto), clMissingArgs(clProto),
  clNonEmbeddableSymbolCharP(clProto), clNot(clProto), clNull(clProto),
  clOutputStream(clProto), clPackageName(clProto), clPlusp(clProto),
  clPprintFill(clProto), clPprintIndent(clProto),
  clPprintNewline(clProto), clPprintToplevel(clProto),
  clPrintBignum(clProto), clPrintCase(clProto),
  clPrintCharacterPretty(clProto), clPrintElementAbortedP(clProto),
  clPrintFixnum(clProto), clPrintFixnum10(clProto),
  clPrintFloat(clProto), clPrintFloatExponent(clProto),
  clPrintFloat1(clProto), clPrintInteger(clProto),
  clPrintInteger1(clProto), clPrintInteger2(clProto),
  clPrintMetaobject(clProto), clPrintStructure(clProto),
  clPrintUnreadableObjectHeader(clProto),
  clPrintUnreadableObjectTrailer(clProto), clReadtableCase(clProto),
  clRest(clProto), clRound(clProto), clScaleExponent(clProto),
  clSetCharBit(clProto), clSome(clProto), clSymbolName(clProto),
  clSymbolPackage(clProto), clTruncate(clProto), clValues(clProto),
  clVectorPushExtend(clProto), clWriteChar(clProto),
  clWriteCharPLUSPLUS(clProto), clWriteCharBits(clProto),
  clWriteLeadingRadix(clProto), clWriteSign(clProto),
  clWriteString(clProto), clWriteToplevel(clProto),
  clWriteTrailingRadix(clProto), clZerop(clProto);

clObject clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCons(clProto), clEnsureDeftype(clProto), clExtraArgs(clProto),
  clIntern(clProto), clMakeKeyword(clProto), clMapc(clProto),
  clMissingArgs(clProto), clPkg(clProto);

clObject clPLUS_FUNC(clProto), cl1PLUS_FUNC(clProto),
  cl1MINUS_FUNC(clProto), clAddInteger(clProto),
  clAllocateResource(clProto), clAlphanumericp(clProto),
  clApply(clProto), clAref(clProto), cl_SETF_Aref(clProto),
  clAttemptToOutput(clProto), clCanonicalizeSpecializer(clProto),
  clCar(clProto), clCdr(clProto), clCharDowncase(clProto),
  clCharUpcase(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCons(clProto), clConsp(clProto), clDeallocateResource(clProto),
  clEndBlock(clProto), clEnqueue(clProto), clEnsureClass(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEq(clProto), clEql(clProto), clError(clProto),
  clExtraArgs(clProto), clFindClass(clProto), clFloor(clProto),
  clFlush(clProto), clForceSomeOutput(clProto), clFuncall(clProto),
  clGeInteger(clProto), cl_SETF_Get(clProto),
  cl_SETF_GlobalDeclaration(clProto), clHandleCharMode(clProto),
  clInitializePp(clProto), clKeyArg(clProto), clLength(clProto),
  clList(clProto), clListp(clProto), clMakeArray(clProto),
  clMakeKeyword(clProto), clMakeResource(clProto), clMax(clProto),
  clMinusp(clProto), clMissingArgs(clProto), clNot(clProto),
  clNull(clProto), clOutputLine(clProto), clOutputStream(clProto),
  clPlusp(clProto), clPopBlockStack(clProto),
  clPopPrefixStack(clProto), clPosition(clProto),
  clPprintStyle(clProto), clPprintToplevel(clProto),
  clPrintCircularP(clProto), clPrintElementAbortedP(clProto),
  clPrintObjectAbortedP(clProto), clPushBlockStack(clProto),
  clPushPrefixStack(clProto), clResourceParameters(clProto),
  cl_SETF_ResourceParameters(clProto), clRest(clProto),
  clReverseStringInPlace(clProto), clSetIndentationPrefix(clProto),
  clSetPrefix(clProto), clSetSuffix(clProto),
  clSetupForNextLine(clProto), cl_SETF_SlotValue(clProto),
  clStartBlock(clProto), clTabPosition(clProto), clWriteChar(clProto),
  clWriteCharPLUSPLUS(clProto), clWriteLine(clProto),
  clWriteString(clProto), clWriteStringPLUSPLUS(clProto),
  clWriteStringPLUSPLUSPLUS(clProto), clWriteToplevel(clProto),
  clZerop(clProto);

clObject clAppend(clProto), clBoundp(clProto), clCar(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCheckKeys(clProto), clCons(clProto), clEq(clProto),
  clExtraArgs(clProto), clFindDeclarations(clProto),
  cl_SETF_GlobalDeclaration(clProto), clKeyArg(clProto),
  clList(clProto), clListSTAR(clProto), cl_SETF_MacroFunction(clProto),
  clMakeKeyword(clProto), clMakeSymbol(clProto),
  clMissingArgs(clProto), clNot(clProto), clNull(clProto),
  clSignalProgramError(clProto);

clObject cl1PLUS_FUNC(clProto), clAddInteger(clProto),
  clApply(clProto), clAtom(clProto), clBit(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCeiling(clProto), clCharpSimpleBaseString __P((clCharp)),
  clClassp(clProto), clCons(clProto), clConsp(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEq(clProto), clEql(clProto), clEqlHash(clProto),
  clExtraArgs(clProto), clFindClass(clProto), clGeInteger(clProto),
  clGetSimpleVector(clProto), cl_SETF_GlobalDeclaration(clProto),
  clLength(clProto), clList(clProto), clMakeKeyword(clProto),
  clMissingArgs(clProto), clNot(clProto), clNull(clProto),
  clRest(clProto), clStringEq(clProto), clStringHash __P((clObject));

clObject clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCons(clProto),
  clEndp(clProto), clExport(clProto), clFindPackage(clProto),
  clIntern(clProto), clList(clProto), clMakeKeyword(clProto),
  clMakePackage(clProto), clRenamePackage(clProto),
  clUsePackage(clProto);

clObject cl1PLUS_FUNC(clProto), cl1MINUS_FUNC(clProto),
  clAddInteger(clProto), clAllocateResource(clProto),
  clAlphanumericp(clProto), clAppend(clProto), clApply(clProto),
  clAssoc(clProto), clBoundp(clProto), clCachedNamestring(clProto),
  clCanonicalizeComp(clProto), clCanonicalizeSpecializer(clProto),
  clCar(clProto), clCdr(clProto), clCharInt(clProto),
  clCharacterp(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCheckKeys(clProto), clClassOf(clProto), clCodeChar(clProto),
  clCombineSubcomponents(clProto), clCompactifyString(clProto),
  clCons(clProto), clCopyReadtable(clProto),
  clDeallocateResource(clProto), clDelete(clProto),
  clDirectoryReader(clProto), clDoubleReader(clProto), clEndp(clProto),
  clEnsureClass(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clEql(clProto),
  clError(clProto), clExpandType(clProto), clExtraArgs(clProto),
  clFastFind __P((clObject, clObject)),
  clFastFindSlot __P((clObject, clObject)), clFind(clProto),
  clFindClass(clProto), clFindIf(clProto), clFindType(clProto),
  clFirst(clProto), clFixedVersionP(clProto), clFixnump(clProto),
  clFuncall(clProto), clGeInteger(clProto),
  clGenerateSetfMethod(clProto), clGetMacroCharacter(clProto),
  clGetOutputStreamString(clProto), clGetcwd(clProto),
  clGetenv(clProto), cl_SETF_GlobalDeclaration(clProto),
  clHostPathnameClass(clProto), clIllegalParseCharacter(clProto),
  clInternEqlSpecializer(clProto), clKeyArg(clProto),
  clLength(clProto), clList(clProto), clListSTAR(clProto),
  clListp(clProto), clLocalCase(clProto),
  clLogicalPathnameTranslations(clProto), clMachineInstance(clProto),
  cl_SETF_MacroFunction(clProto), clMakeArray(clProto),
  clMakeDirectoryNamestring(clProto), clMakeHashTable(clProto),
  clMakeKeyword(clProto), clMakeList(clProto),
  clMakeLoadFormSavingSlots(clProto), clMakePathname(clProto),
  clMakeReadtable(clProto), clMakeSymbol(clProto), clMapcar(clProto),
  clMax(clProto), clMergeDevice(clProto), clMergeDirectories(clProto),
  clMergePathnames(clProto), clMismatch(clProto),
  clMissingArgs(clProto), clNamestring(clProto),
  clNamestringError(clProto), clNamestringPathnameClass(clProto),
  clNot(clProto), clNthcdr(clProto), clNull(clProto),
  clOutputStream(clProto), clParseNamestring(clProto),
  clPathnameComponentEqual(clProto), clPathnameComponentMatch(clProto),
  clPathnameDevice(clProto), clPathnameDirectory(clProto),
  clPathnameHost(clProto), clPathnameMatchP(clProto),
  clPathnameName(clProto), clPathnameType(clProto),
  clPathnameVersion(clProto), clPeekChar(clProto), clPosition(clProto),
  clPositionIf(clProto), clPprintNewline(clProto),
  clPprintToplevel(clProto), clPrinc(clProto),
  clPrincToString(clProto), clPrintCase(clProto),
  clPrintElementAbortedP(clProto), clPrintPathnameReadably(clProto),
  clRead(clProto), clReadChar(clProto), clReadFromString(clProto),
  clReadPreservingWhitespace(clProto), clReadtableCase(clProto),
  cl_SETF_ReadtableCase(clProto), cl_SETF_ReadtableParse(clProto),
  clRedefineConstant(clProto), clRegexp(clProto),
  clResolveVersion(clProto), clRest(clProto), clSearch(clProto),
  clSecond(clProto), clSetMacroCharacter(clProto),
  clSetSyntaxFromChar(clProto), cl_SETF_SetfExpander(clProto),
  clSlotBoundp(clProto), cl_SETF_SlotValue(clProto),
  clSlotValue(clProto), clSome(clProto), clStringEQUAL(clProto),
  clSymbolFunction(clProto), clSymbolp(clProto),
  clTerminatedReader(clProto), clTranslateComponent(clProto),
  clTranslateItem(clProto), clTranslateLogicalPathname(clProto),
  clTypeOf(clProto), clUnmergeDirectories(clProto),
  clUnreadChar(clProto), clUpdateHostPathnameClass(clProto),
  clUpdateLogicalPathnameTranslations(clProto), clValues(clProto),
  clWarn(clProto), clWildPathnameP(clProto), clWildTokenP(clProto),
  clWildcardp(clProto), clWrite(clProto), clWriteChar(clProto),
  clWriteCharPLUSPLUS(clProto), clWriteString(clProto),
  clWriteStringPLUSPLUS(clProto), clWriteToplevel(clProto),
  clZerop(clProto);

clObject cl1MINUS_FUNC(clProto), clBoundp(clProto),
  cl_SETF_GlobalDeclaration(clProto), clLogior(clProto),
  clRedefineConstant(clProto);

clObject clAddPkg(clProto), clAdjoin(clProto), clAppend(clProto),
  clApply(clProto), clAssoc(clProto), clBoundp(clProto),
  clCadr(clProto), clCanonicalizeCondition(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCddr(clProto),
  clCdr(clProto), clCerror(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clCheckUses(clProto), clClassp(clProto), clCollectConflicts(clProto),
  clCons(clProto), clCopyList(clProto), clDelete(clProto),
  clDeletePackage(clProto), clEndp(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEq(clProto), clEql(clProto), clError(clProto),
  clExtraArgs(clProto), clFind(clProto), clFindClass(clProto),
  clFindInheritedSymbol(clProto), clFindPackage(clProto),
  clFindPresentSymbol(clProto), clFindSymbol(clProto),
  clFuncall(clProto), clGensym(clProto), clGetf(clProto),
  cl_SETF_GlobalDeclaration(clProto), clImport(clProto),
  clIntern(clProto), clInternEqlSpecializer(clProto),
  clIntersection(clProto), clKeyArg(clProto), clLength(clProto),
  clList(clProto), clListSTAR(clProto), clListArg(clProto),
  cl_SETF_MacroFunction(clProto), clMakeCondition(clProto),
  clMakeHashTable(clProto), clMakeKeyword(clProto),
  clMakeNewInternal(clProto), clMakePackage(clProto),
  clMakePackage1(clProto), clMakeRestart(clProto),
  clMakeStructure(clProto), clMakeSymbol(clProto), clMapcar(clProto),
  clMax(clProto), clMissingArgs(clProto),
  clMultipleAppearanceError(clProto), clNewhomeSymbol(clProto),
  clNot(clProto), clNreconc(clProto), clNull(clProto),
  clOpenAddressStringGethash __P((clObject, clObject, clObject)),
  clOpenAddressStringSethash __P((clObject, clObject, clObject)),
  clOutputStream(clProto), cl_SETF_PackageDocumentation(clProto),
  clPackageDocumentation(clProto), clPackageExternals(clProto),
  clPackageInternals(clProto), clPackageName(clProto),
  clPackageOtherNames(clProto), cl_SETF_PackageOtherNames(clProto),
  cl_SETF_PackagePrettyName(clProto), clPackagePrettyName(clProto),
  clPackageShadows(clProto), cl_SETF_PackageShadows(clProto),
  cl_SETF_PackageUsedBy(clProto), clPackageUsedBy(clProto),
  cl_SETF_PackageUses(clProto), clPackageUses(clProto),
  clPackagep(clProto), clPkg(clProto), clPkgName(clProto),
  clPrinc(clProto), clPrintUnreadableObjectHeader(clProto),
  clPrintUnreadableObjectTrailer(clProto), clPutf(clProto),
  clRead(clProto), clRemove(clProto), clRemovePkg(clProto),
  clResolve1Conflict(clProto), clRest(clProto), clRplacd(clProto),
  clShadowingImport(clProto), clSignalProgramError(clProto),
  clString(clProto), clStringEQUAL(clProto), clStructref(clProto),
  cl_SETF_Structref(clProto), clSymbolFunction(clProto),
  clSymbolName(clProto), clSymbolPackage(clProto),
  clUnhomeSymbol(clProto), clUnusePackage(clProto), clValues(clProto),
  clWriteString(clProto);

clObject clAtom(clProto), clCar(clProto), clCarEq(clProto),
  clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)),
  cl_SETF_CompilerMacroFunction(clProto), clCons(clProto),
  clConsp(clProto), clConstantp(clProto), clEq(clProto),
  clEqTestP(clProto), clError(clProto), clEval(clProto),
  clEvery(clProto), clExtraArgs(clProto), clGensym(clProto),
  clKeyArg(clProto), clList(clProto), clListSTAR(clProto),
  clMakeKeyword(clProto), clMissingArgs(clProto), clNot(clProto),
  clRplacd(clProto), clSecond(clProto), clSymbolp(clProto);

clObject cl1PLUS_FUNC(clProto), clApply(clProto), clAsh(clProto),
  clBoundp(clProto), clCanonicalizeSpecializer(clProto),
  clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCis(clProto),
  clComplex(clProto), clComplexp(clProto), clCons(clProto),
  clDoubleDoubleFloat __P((double)), clDoubleSingleFloat __P((double)),
  clEndp(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clEql(clProto),
  clError(clProto), clExpDoubleFloat __P((clObject)),
  clExpInteger __P((clObject)), clExpRatio __P((clObject)),
  clExpSingleFloat __P((clObject)), clExpandType(clProto),
  clExptInteger(clProto),
  clExpt2DoubleFloatDoubleFloat __P((clObject, clObject)),
  clExpt2DoubleFloatRatio __P((clObject, clObject)),
  clExpt2DoubleFloatSingleFloat __P((clObject, clObject)),
  clExpt2IntegerDoubleFloat __P((clObject, clObject)),
  clExpt2IntegerRatio __P((clObject, clObject)),
  clExpt2IntegerSingleFloat __P((clObject, clObject)),
  clExpt2RatioDoubleFloat __P((clObject, clObject)),
  clExpt2RatioRatio __P((clObject, clObject)),
  clExpt2RatioSingleFloat __P((clObject, clObject)),
  clExpt2SingleFloatDoubleFloat __P((clObject, clObject)),
  clExpt2SingleFloatRatio __P((clObject, clObject)),
  clExpt2SingleFloatSingleFloat __P((clObject, clObject)),
  clExtraArgs(clProto), clFindClass(clProto), clGcd(clProto),
  cl_SETF_GlobalDeclaration(clProto), clIntegerLength(clProto),
  clIsqrt1(clProto), clList(clProto), clLog(clProto),
  clLogDoubleFloat __P((clObject)), clLogInteger __P((clObject)),
  clLogRatio __P((clObject)), clLogSingleFloat __P((clObject)),
  clLogtest(clProto), clMakeComplex __P((clObject, clObject)),
  clMakeKeyword(clProto), clMakeSymbol(clProto), clMax(clProto),
  clMin(clProto), clMinusp(clProto), clMissingArgs(clProto),
  clNot(clProto), clNull(clProto), clOddp(clProto),
  clRedefineConstant(clProto), clRest(clProto),
  clSqrt1DoubleFloat __P((clObject)), clSqrt1Integer __P((clObject)),
  clSqrt1Ratio __P((clObject)), clSqrt1SingleFloat __P((clObject)),
  clTruncate(clProto), clZerop(clProto);

clObject clAppend(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)),
  cl_SETF_CompilerMacroFunction(clProto), clEq(clProto),
  clExtraArgs(clProto), clFirst(clProto), clGensym(clProto),
  clGetSetfExpansion(clProto), clLength(clProto), clList(clProto),
  clListSTAR(clProto), cl_SETF_MacroFunction(clProto),
  clMissingArgs(clProto), clModifyBody(clProto),
  cl_SETF_SetfExpander(clProto), clValues(clProto);

clObject clApply(clProto), clAsh(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCons(clProto),
  clDecodeDoubleFloat(clProto), clDecodeSingleFloat(clProto),
  clDoubleDoubleFloat __P((double)), clDoubleFloatP(clProto),
  clDoubleSingleFloat __P((double)), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clEql(clProto),
  clError(clProto), clExtraArgs(clProto), clFindClass(clProto),
  clFloat(clProto),
  clFloatSign2DoubleFloatDoubleFloat __P((clObject, clObject)),
  clFloatSign2DoubleFloatSingleFloat __P((clObject, clObject)),
  clFloatSign2SingleFloatDoubleFloat __P((clObject, clObject)),
  clFloatSign2SingleFloatSingleFloat __P((clObject, clObject)),
  clIntegerDecodeFloat(clProto), clList(clProto),
  clMakeComplex __P((clObject, clObject)), clMakeKeyword(clProto),
  clMakeRatio __P((clObject, clObject)), clMinusp(clProto),
  clMissingArgs(clProto), clNot(clProto), clNull(clProto),
  clPlusp(clProto), clRational1(clProto), clRationalize(clProto),
  clRationalp(clProto), clRatiop(clProto), clRest(clProto),
  clScaleFloatDoubleFloatInteger __P((clObject, clObject)),
  clScaleFloatSingleFloatInteger __P((clObject, clObject)),
  clSingleFloatP(clProto), clTruncate(clProto), clValues(clProto),
  clZerop(clProto);

clObject clAppend(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clCons(clProto), clExtraArgs(clProto),
  clExtractParameterNames(clProto), clFindDeclarations(clProto),
  clGensym(clProto), cl_SETF_GlobalDeclaration(clProto),
  clKeyArg(clProto), clList(clProto), clListSTAR(clProto),
  cl_SETF_MacroFunction(clProto), clMakeKeyword(clProto),
  clMissingArgs(clProto), clNot(clProto);

clObject clAdjoin(clProto), clAppend(clProto), clApply(clProto),
  clAtom(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckInitargs1(clProto),
  clCheckSlotInitializationP(clProto), clClassOf(clProto),
  clComputeSlotLocations(clProto), clCons(clProto), clConsp(clProto),
  clEndp(clProto), clEq(clProto), clEql(clProto), clError(clProto),
  clExtraArgs(clProto), clFastFind __P((clObject, clObject)),
  cl_SETF_Fdefinition(clProto), clFind(clProto), clFindIfNot(clProto),
  clFindType(clProto), clFuncall(clProto),
  clFuncallableStandardInstanceAccess(clProto),
  clGetProperties(clProto), clGetf(clProto),
  clIllegalChangeClass(clProto), clIllegalInitialization(clProto),
  clIntersectTypes(clProto), clLast(clProto), clList(clProto),
  clListSTAR(clProto), clLocalSlotP(clProto),
  clMakeEffectiveSlotDefinition(clProto), clMakeEmfTable __P((void)),
  clMakeFuncallableStandardInstance __P((clObject, clObject, clObject)),
  clMakeFuncallableStandardInstanceFromSlots __P((clObject, clObject, clObject)),
  clMakeKeyword(clProto),
  clMakeStandardInstance __P((clObject, clObject, clObject)),
  clMakeStandardInstanceFromSlots __P((clObject, clObject, clObject)),
  clMakeStaticSlots __P((clObject, ...)),
  clMakeWrapper __P((clObject)), clMapc(clProto),
  clMissingArgs(clProto), clNInstanceSlots(clProto), clNot(clProto),
  clRemove(clProto), clRest(clProto), clRplacd(clProto),
  clSetFuncallableInstanceFunction(clProto),
  clStandardChangeClass(clProto),
  clStandardDiscriminatingFunction(clProto),
  clStandardInstanceAccess(clProto), clUpdateInstance(clProto),
  clValues(clProto);

clObject clAddIntegerInteger __P((clObject, clObject)),
  clAppend(clProto), clApply(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)),
  clCheckForGlobalMacroEnv(clProto), clClassOf(clProto),
  clCons(clProto), clError(clProto), clExtraArgs(clProto),
  clFastFindSlot __P((clObject, clObject)), clFboundp(clProto),
  clFunctionNameKey(clProto),
  clGeIntegerInteger __P((clObject, clObject)), clGensym(clProto),
  cl_SETF_GlobalDeclaration(clProto), clIntern(clProto),
  clList(clProto), clListSTAR(clProto), clMakeKeyword(clProto),
  clMakeMacroFunction(clProto), clMakeSlots __P((clObject)),
  clMakeSymbols(clProto), clMapcar(clProto), clMissingArgs(clProto),
  clSetfFunctionNameP(clProto), clSignalProgramError(clProto),
  clSlotValue(clProto), clValues(clProto);

void clMillisleep __P((int));
clObject clSTAR_FUNC(clProto), clPLUS_FUNC(clProto),
  cl1PLUS_FUNC(clProto), cl1MINUS_FUNC(clProto), clAcons(clProto),
  clAdjoin(clProto), clAppend(clProto), clApply(clProto),
  clAssoc(clProto), clBoundp(clProto), clCanonicalYear(clProto),
  clCar(clProto), clCdr(clProto), clCeiling(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCons(clProto),
  clDecodeUniversalTime(clProto), clDelete(clProto),
  clDescribe(clProto), clEndp(clProto), clEq(clProto),
  clError(clProto), clExtraArgs(clProto), cl_SETF_Fdefinition(clProto),
  clFind(clProto), clFirstNonEmptyIndex __P((clObject, clObject)),
  clFixnump(clProto), clGcData __P((void)), clGetDecodedTime(clProto),
  clGetTimezone __P((clObject)), clGetUniversalTime(clProto),
  cl_SETF_GlobalDeclaration(clProto), clHashTableNBuckets(clProto),
  clHashTableValue __P((clObject, clObject)), clIdString(clProto),
  clIntInteger __P((int)), clLeapDaysSince1900(clProto),
  clLispImplementationVersion(clProto), clList(clProto),
  clListSTAR(clProto), clListAllPackages(clProto), clListArg(clProto),
  clListTraced(clProto), clMachineType(clProto),
  cl_SETF_MacroFunction(clProto), clMakeGeneralVector __P((clObject)),
  clMakeKeyword(clProto), clMakeRestart(clProto),
  clMakeSymbol(clProto), clMakeXint __P((clObject)), clMapcar(clProto),
  clMissingArgs(clProto), clMod(clProto), clNot(clProto),
  clNull(clProto), clOutputStream(clProto),
  clPackageExternals(clProto), clPackageInternals(clProto),
  clPackageUses(clProto), clPkg(clProto), clRealTime(clProto),
  clRedefineConstant(clProto), clRoom(clProto), clRunTime(clProto),
  clSearch(clProto), clShortSiteName(clProto), clSoftwareType(clProto),
  clString(clProto), clStringUpcase(clProto), clSvref(clProto),
  cl_SETF_Svref(clProto), clSymbolName(clProto), clTerpri(clProto),
  clTruncate(clProto), clUname __P((int)), clUnixTime __P((void)),
  clValues(clProto), clValuesList(clProto), clWarn(clProto),
  clWriteToplevel(clProto), clZerop(clProto);

clObject clAdjoin(clProto), clAppend(clProto), clCar(clProto),
  clCarEq(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)),
  clCheckCongruentLambda(clProto), clClassOf(clProto), clCons(clProto),
  clEndp(clProto), clEqlSpecializerP(clProto), clError(clProto),
  clExtraArgs(clProto), clExtractGenericFunctionLambdaList(clProto),
  clExtractKeywords(clProto), clFastFind __P((clObject, clObject)),
  clFastFindSlot __P((clObject, clObject)),
  cl_SETF_Fdefinition(clProto), clFinalizeGenericFunction(clProto),
  clFindIf(clProto), clFindType(clProto), clFuncall(clProto),
  clFuncallableStandardInstanceAccess(clProto), clGetMethod(clProto),
  clIllegalInitialization(clProto), clInternEqlSpecializer(clProto),
  clKeyArg(clProto), clLength(clProto), clList(clProto),
  clListSTAR(clProto), clMakeEmfTable __P((void)),
  clMakeFuncallableStandardInstanceFromSlots __P((clObject, clObject, clObject)),
  clMakeKeyword(clProto),
  clMakeStandardInstanceFromSlots __P((clObject, clObject, clObject)),
  clMakeStaticSlots __P((clObject, ...)), clMissingArgs(clProto),
  clNot(clProto), clRemove(clProto), clRest(clProto),
  clRplacd(clProto), clSecond(clProto),
  clSetFuncallableInstanceFunction(clProto),
  clSetGfLambdaList(clProto), clSlotBoundp(clProto),
  clStandardDiscriminatingFunction(clProto),
  clStandardInstanceAccess(clProto), clUpdateInstance(clProto),
  clValues(clProto);

clObject clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clClassOf(clProto),
  clClassPrecedenceListClass(clProto),
  clComputeApplicableMethodsUsingClassesStandardGenericFunctionT(clProto),
  clCons(clProto),
  clEmfTableSet __P((clObject, clObject, clObject, clObject)),
  clError(clProto), clExtraArgs(clProto), cl_SETF_Fdefinition(clProto),
  clFindType(clProto), clFuncallableStandardInstanceAccess(clProto),
  clGenericFunctionAllowOtherKeysPStandardGenericFunction(clProto),
  clGenericFunctionKeywordsStandardGenericFunction(clProto),
  clGenericFunctionMethodCombinationGenericFunction(clProto),
  clInitializeCriticalGenerics(clProto), clList(clProto),
  clMakeEmfTable __P((void)),
  clMakeFuncallableStandardInstanceFromSlots __P((clObject, clObject, clObject)),
  clMakeKeyword(clProto),
  clMakeStandardInstanceFromSlots __P((clObject, clObject, clObject)),
  clMakeStaticSlots __P((clObject, ...)),
  clMethodFunctionMethod(clProto), clMethodQualifiersMethod(clProto),
  clMethodSpecializersMethod(clProto), clMissingArgs(clProto),
  clProperName(clProto), clSetFuncallableInstanceFunction(clProto),
  clSlotBoundp(clProto), clStandardDiscriminatingFunction(clProto),
  clStandardInstanceAccess(clProto), clUpdateInstance(clProto);

clObject clAppend(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCons(clProto),
  clConsp(clProto), clEndp(clProto),
  clEnsureMethodCombinationType(clProto), clEq(clProto),
  clError(clProto), clExtraArgs(clProto),
  clFindMethodCombinationType(clProto), clFirst(clProto),
  clInvalidMethodError(clProto), clList(clProto), clListSTAR(clProto),
  clMakeKeyword(clProto), clMethodCombinationError(clProto),
  clMissingArgs(clProto), clNreverse(clProto), clNull(clProto),
  clQualifierMatch(clProto), clRest(clProto), clRplacd(clProto),
  clValues(clProto);

clObject clBindingValue(clProto), clCar(clProto), clCarEq(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCheckTypef(clProto), clCons(clProto), clConsp(clProto),
  clEq(clProto), clEql(clProto), clError(clProto), clExpand(clProto),
  clExtraArgs(clProto), clFuncall(clProto),
  clFunctionInformation(clProto), clFunctionNameKey(clProto),
  clGensym(clProto), clGetMacroFunction(clProto),
  clGetSetfExpansion(clProto), clGetSymbolMacroFunction(clProto),
  clGetf(clProto), clGlobalMacroFunction(clProto),
  clGlobalSymbolMacroFunction(clProto), clList(clProto),
  clMacroFunctionFunction(clProto), clMacroexpand(clProto),
  clMacroexpand1(clProto), clMakeKeyword(clProto),
  clMissingArgs(clProto), clNot(clProto), clSetfFunctionNameP(clProto),
  clSymbolFunction(clProto), clSymbolp(clProto), clValues(clProto),
  clVariableInformation(clProto);

clObject clAppend(clProto), clCadr(clProto), clCar(clProto),
  clCarEq(clProto), clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clCons(clProto), clConsp(clProto), clDestructureLambda(clProto),
  clEndp(clProto), clEq(clProto), clExtraArgs(clProto),
  clFind(clProto), clFindDeclarations(clProto),
  clFunctionNameKey(clProto), cl_SETF_GlobalDeclaration(clProto),
  clGloballySpecialP(clProto), clKeyArg(clProto),
  clLambdaListKeywordP(clProto), clLdiff(clProto), clList(clProto),
  clListSTAR(clProto), cl_SETF_MacroFunction(clProto),
  clMakeKeyword(clProto), clMakeSymbol(clProto),
  clMissingArgs(clProto), clNconc(clProto), clNot(clProto),
  clNth(clProto), clNthcdr(clProto), clParseMacro(clProto),
  clRest(clProto), clRplaca(clProto), clSecond(clProto),
  clSetfFunctionNameP(clProto), clSignalProgramError(clProto),
  clSymbolp(clProto), clValues(clProto);

clObject clPLUS_FUNC(clProto), cl1PLUS_FUNC(clProto),
  cl1MINUS_FUNC(clProto), clAddLoopPath(clProto), clAdjoin(clProto),
  clAppend(clProto), clApply(clProto), clAssoc(clProto),
  clAtom(clProto), clBoundp(clProto), clCaadr(clProto),
  clCaar(clProto), clCadar(clProto), clCaddr(clProto), clCadr(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCddr(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCheckKeys(clProto), clCoerce(clProto), clCons(clProto),
  clConsp(clProto), clConstantp(clProto), clCopyList(clProto),
  clDeclarationInformation(clProto), clDelete(clProto),
  clDestructuringSize(clProto), clEndp(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEq(clProto), clEql(clProto), clError(clProto),
  clEstimateCodeSize(clProto), clEstimateCodeSize1(clProto),
  clEval(clProto), clExtraArgs(clProto), clFind(clProto),
  clFindClass(clProto), clFirst(clProto), clFixnump(clProto),
  clFourth(clProto), clFuncall(clProto), clGensym(clProto),
  clGentemp(clProto), clGet(clProto),
  cl_SETF_GlobalDeclaration(clProto), clHideVariableReference(clProto),
  clKeyArg(clProto), clLast(clProto), clLength(clProto),
  clLevelStructurePrinter(clProto), clList(clProto),
  clListSTAR(clProto), clListp(clProto), clLoopBindBlock(clProto),
  clLoopCheckDataType(clProto),
  clLoopCodeDuplicationThreshold(clProto),
  clLoopCollectPrepositionalPhrases(clProto),
  clLoopCollectorClass(clProto), cl_SETF_LoopCollectorData(clProto),
  clLoopCollectorData(clProto), clLoopCollectorDtype(clProto),
  cl_SETF_LoopCollectorDtype(clProto),
  cl_SETF_LoopCollectorHistory(clProto),
  clLoopCollectorHistory(clProto), clLoopCollectorName(clProto),
  cl_SETF_LoopCollectorTempvars(clProto),
  clLoopCollectorTempvars(clProto),
  clLoopConstantFoldIfPossible(clProto), clLoopConstantp(clProto),
  clLoopConstructReturn(clProto), clLoopContext(clProto),
  clLoopDeclareVariable(clProto), clLoopDisallowConditional(clProto),
  clLoopEmitBody(clProto), clLoopEmitFinalValue(clProto),
  clLoopError(clProto), clLoopGentemp(clProto),
  clLoopGetCollectionInfo(clProto), clLoopGetForm(clProto),
  clLoopGetProgn(clProto), clLoopHackIteration(clProto),
  clLoopIterationDriver(clProto), clLoopListStep(clProto),
  clLoopLookupKeyword(clProto), clLoopMakeDesetq(clProto),
  clLoopMakeIterationVariable(clProto), clLoopMakePsetq(clProto),
  clLoopMakeVariable(clProto), clLoopMinimaxAnswerVariable(clProto),
  clLoopMinimaxFlagVariable(clProto),
  cl_SETF_LoopMinimaxFlagVariable(clProto),
  clLoopMinimaxInfinityData(clProto), clLoopMinimaxOperations(clProto),
  cl_SETF_LoopMinimaxOperations(clProto),
  clLoopMinimaxTempVariable(clProto), clLoopMinimaxType(clProto),
  clLoopNoteMinimaxOperation(clProto),
  clLoopOptimizationQuantities(clProto), clLoopOptionalType(clProto),
  clLoopPathFunction(clProto), clLoopPathInclusivePermitted(clProto),
  clLoopPathPrepositionGroups(clProto), clLoopPathUserData(clProto),
  clLoopPopSource(clProto), clLoopPseudoBody(clProto),
  clLoopSequencer(clProto), clLoopStandardExpansion(clProto),
  clLoopTassoc(clProto), clLoopTequal(clProto), clLoopTmember(clProto),
  clLoopTranslate(clProto), clLoopTypedInit(clProto),
  clLoopUniverseAnsi(clProto), clLoopUniverseForKeywords(clProto),
  clLoopUniverseImplicitForRequired(clProto),
  clLoopUniverseIterationKeywords(clProto),
  clLoopUniverseKeywords(clProto), clLoopUniversePathKeywords(clProto),
  clLoopUniverseTypeKeywords(clProto),
  clLoopUniverseTypeSymbols(clProto), clLoopWarn(clProto),
  clLoopWhenItVariable(clProto), cl_SETF_MacroFunction(clProto),
  clMacroexpand(clProto), clMacroexpand1(clProto),
  clMakeAnsiLoopUniverse(clProto), clMakeGeneralVector __P((clObject)),
  clMakeHashTable(clProto), clMakeKeyword(clProto),
  clMakeLoopCollector(clProto), clMakeLoopMinimax(clProto),
  clMakeLoopMinimaxInternal(clProto), clMakeLoopPath(clProto),
  clMakeLoopUniverse(clProto), clMakeStandardLoopUniverse(clProto),
  clMakeStructure(clProto), clMakeSymbol(clProto), clMapcan(clProto),
  clMapcar(clProto), clMissingArgs(clProto), clNamedVariable(clProto),
  clNconc(clProto), clNot(clProto), clNreconc(clProto),
  clNull(clProto), clRest(clProto), clRevappend(clProto),
  clSecond(clProto), clSpecialOperatorP(clProto), clString(clProto),
  clStringEQUAL(clProto), clStructref(clProto),
  cl_SETF_Structref(clProto), clSymbolFunction(clProto),
  clSymbolName(clProto), clSymbolp(clProto), clThird(clProto),
  clTypeOf(clProto), clValues(clProto), clWarn(clProto);

clObject cl1PLUS_FUNC(clProto), clAddExternalVariable(clProto),
  clAddInitCode(clProto), clAddTarget(clProto), clAppend(clProto),
  clApply(clProto), clAref(clProto), clArrayDimensions(clProto),
  clBoundp(clProto), clCSymbolP(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCeiling(clProto), clCharInt(clProto), clCharName(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCircularp(clProto),
  clClassOf(clProto), clClassp(clProto),
  clCompactifyElementType(clProto), clConcatenate(clProto),
  clCons(clProto), clConsp(clProto), clConstantIdIdentifier(clProto),
  clConstantIdString(clProto), clCopyStructure(clProto),
  clCountConstants(clProto), clCountGensyms(clProto),
  clDoubleDoubleFloat __P((double)), clDoubleSingleFloat __P((double)),
  clEndp(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clEql(clProto),
  clError(clProto), clExpandType(clProto), clExtraArgs(clProto),
  clFastFind __P((clObject, clObject)),
  clFileCompilerEnvBasicConstants(clProto),
  clFileCompilerEnvConstants(clProto),
  clFileCompilerEnvExternalConstants(clProto), clFindClass(clProto),
  clFindPackage(clProto), clFindType(clProto),
  clFirstNonEmptyIndex __P((clObject, clObject)), clFixnump(clProto),
  clFloat(clProto), clFormatGroupedInteger(clProto),
  clFuncall(clProto), clGetConstantName(clProto),
  clGetExternalConstantName(clProto), clGetf(clProto),
  cl_SETF_GlobalDeclaration(clProto),
  clHashTableKey __P((clObject, clObject)),
  clHashTableNBuckets(clProto),
  clHashTableValue __P((clObject, clObject)), clIntern(clProto),
  clLength(clProto), clLevelStructurePrinter(clProto), clList(clProto),
  clListSTAR(clProto), clMakeChar(clProto), clMakeCharp(clProto),
  clMakeConstantId(clProto), clMakeConstantName(clProto),
  clMakeConstantString(clProto), clMakeConstantTarget(clProto),
  clMakeDouble(clProto), clMakeInt(clProto), clMakeKeyword(clProto),
  clMakeNumericConstantId(clProto), clMakeStructure(clProto),
  clMakeSymbol(clProto), clMakeTargets(clProto),
  clMissingArgs(clProto), clNInstanceSlots(clProto), clNot(clProto),
  clNull(clProto), clOutputStream(clProto), clPackageName(clProto),
  clPkg(clProto), clPrintUnreadableObjectHeader(clProto),
  clPrintUnreadableObjectTrailer(clProto), clRest(clProto),
  clRplacd(clProto), clSetConstantName(clProto),
  clStringEQUAL(clProto), clStructref(clProto),
  cl_SETF_Structref(clProto), clSymbolName(clProto),
  clSymbolPackage(clProto), clSymbolp(clProto), clTypeOf(clProto),
  clUpdateInstance(clProto), clValues(clProto), clWalk(clProto),
  clWriteToplevel(clProto), clXintForms(clProto);

clObject cl1PLUS_FUNC(clProto), cl1MINUS_FUNC(clProto),
  clAddInteger(clProto), clAssoc1(clProto), clAtom(clProto),
  clCadddr(clProto), clCaddr(clProto), clCadr(clProto), clCar(clProto),
  clCddddr(clProto), clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clConc(clProto), clCons(clProto), clConsp(clProto), clEndp(clProto),
  clEq(clProto), clExtraArgs(clProto), clFuncall(clProto),
  clGeInteger(clProto), clKeyArg(clProto), clLast(clProto),
  clLast1(clProto), clLength(clProto), clList(clProto),
  clMakeKeyword(clProto), clMax(clProto), clMember1(clProto),
  clMissingArgs(clProto), clNot(clProto), clNthcdr(clProto),
  clNull(clProto), clPlusp(clProto), clRplacd(clProto),
  clSatisfiesTheTest(clProto);

clObject clAppend(clProto), clApply(clProto), clCar(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCons(clProto), clExtraArgs(clProto), clFirst(clProto),
  clGensym(clProto), clGetSetfExpansion(clProto), clList(clProto),
  clListSTAR(clProto), cl_SETF_MacroFunction(clProto),
  clMakeBindingList(clProto), clMakeSymbols(clProto),
  clMissingArgs(clProto), clModifyBody(clProto),
  cl_SETF_SetfExpander(clProto), clSymbolp(clProto), clValues(clProto);

clObject clAddIntegerInteger __P((clObject, clObject)),
  clApply(clProto), clCaar(clProto), clCar(clProto), clCdar(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCons(clProto), clConsp(clProto), clCopyList(clProto),
  clEndp(clProto), clEq(clProto),
  clEqDoubleFloatDoubleFloat __P((clObject, clObject)),
  clEqIntegerInteger __P((clObject, clObject)),
  clEqSingleFloatSingleFloat __P((clObject, clObject)), clEql(clProto),
  clEqlHash(clProto), clError(clProto), clExtraArgs(clProto),
  clFdefinition1(clProto), clFixnump(clProto), clFloor(clProto),
  clFuncall(clProto), clFunctionNameKey(clProto),
  cl_SETF_GlobalDeclaration(clProto), clKeyItem(clProto),
  clLast(clProto), clLengthList(clProto), clList(clProto),
  clListEq(clProto), clMakeKeyword(clProto), clMap1(clProto),
  clMissingArgs(clProto), clNconc(clProto), clNot(clProto),
  clNull(clProto), clRplaca(clProto), clRplacd(clProto),
  clSetFdefinition1(clProto), clSetfFunctionNameP(clProto),
  clStandardInstanceAccess(clProto), clSymbolp(clProto);

clObject cl1PLUS_FUNC(clProto), clAddInteger(clProto),
  clApply(clProto), clAref(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCons(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEq(clProto), clExtraArgs(clProto), clFindClass(clProto),
  clGeInteger(clProto), clLength(clProto), clList(clProto),
  clMakeKeyword(clProto), clMissingArgs(clProto), clNot(clProto),
  clNull(clProto), clPackageName(clProto), clRest(clProto),
  clSymbolName(clProto), clSymbolPackage(clProto);

void clOpenAddressEqRehash __P((clObject)),
  clOpenAddressEqlRehash __P((clObject)),
  clOpenAddressEqualRehash __P((clObject)),
  clOpenAddressEqualpRehash __P((clObject));
clObject clApply(clProto), clCanonicalizeSpecializer(clProto),
  clCar(clProto), clCdr(clProto), clCeiling(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clComputeNBuckets(clProto), clComputeSize(clProto), clCons(clProto),
  clDoubleSingleFloat __P((double)), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clError(clProto),
  clExtraArgs(clProto), clFindClass(clProto), clFindType(clProto),
  clFloat(clProto), clFloor(clProto), clGethashValues(clProto),
  clHashTableNBuckets(clProto), clIntegerIndex __P((clObject)),
  clIntegerp(clProto), clKeyArg(clProto), clList(clProto),
  clMakeHashTable(clProto), clMakeKeyword(clProto),
  clMakeOpenAddressHashTable __P((clObject, clObject, clObject, clObject)),
  clMin(clProto), clMissingArgs(clProto), clNot(clProto),
  clNull(clProto), clOpenAddressClrhash __P((clObject)),
  clOpenAddressEqGethash __P((clObject, clObject, clObject)),
  clOpenAddressEqRemhash __P((clObject, clObject)),
  clOpenAddressEqSethash __P((clObject, clObject, clObject)),
  clOpenAddressEqlGethash __P((clObject, clObject, clObject)),
  clOpenAddressEqlRemhash __P((clObject, clObject)),
  clOpenAddressEqlSethash __P((clObject, clObject, clObject)),
  clOpenAddressEqualGethash __P((clObject, clObject, clObject)),
  clOpenAddressEqualRemhash __P((clObject, clObject)),
  clOpenAddressEqualSethash __P((clObject, clObject, clObject)),
  clOpenAddressEqualpGethash __P((clObject, clObject, clObject)),
  clOpenAddressEqualpRemhash __P((clObject, clObject)),
  clOpenAddressEqualpSethash __P((clObject, clObject, clObject)),
  clOpenAddressMaphash __P((clObject, clObject)), clRest(clProto),
  clRoundPrime(clProto), clSymbolp(clProto), clValues(clProto);

clObject clApply(clProto), clAtom(clProto), clBindingformName(clProto),
  clCanonicalizeClass(clProto),
  clCanonicalizeEnsureGenericFunctionArgs(clProto), clCar(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCheckMetaclass(clProto), clClassOf(clProto), clCons(clProto),
  clConsp(clProto), clEndp(clProto), clEqlSpecializerObject(clProto),
  clEqlSpecializerP(clProto), clError(clProto), clExtraArgs(clProto),
  cl_SETF_Fdefinition(clProto), clFinalizeGenericFunction(clProto),
  clFindType(clProto), clFuncall(clProto),
  clFuncallableStandardInstanceAccess(clProto),
  clInitializeCriticalGenerics(clProto),
  clInternMethodCombination(clProto), clKeyArg(clProto),
  clLength(clProto), clList(clProto), clListSTAR(clProto),
  clMakeEmfTable __P((void)),
  clMakeFuncallableStandardInstanceFromSlots __P((clObject, clObject, clObject)),
  clMakeKeyword(clProto),
  clMakeStandardInstanceFromSlots __P((clObject, clObject, clObject)),
  clMakeStaticSlots __P((clObject, ...)), clMissingArgs(clProto),
  clNot(clProto), clRest(clProto), clRplacd(clProto),
  clSetFuncallableInstanceFunction(clProto),
  clSetGfLambdaList(clProto), clSortApplicableMethods(clProto),
  clSpecializerp(clProto), clStandardDiscriminatingFunction(clProto),
  clStandardInstanceAccess(clProto), clSubclassp(clProto),
  clSymbolp(clProto), clUpdateInstance(clProto), clValues(clProto);
void clClearEmfTable __P((clObject));

clObject clPLUS_FUNC(clProto), clMINUS_FUNC(clProto),
  cl1PLUS_FUNC(clProto), cl1MINUS_FUNC(clProto), clAddInteger(clProto),
  clAllocateResource(clProto), clApply(clProto), clBackupTo(clProto),
  clBoundp(clProto), clCanonicalizeSpecializer(clProto),
  clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCons(clProto),
  clDeallocateResource(clProto), clDecimalString(clProto),
  clDigitChar(clProto), clDigits1(clProto), clEndp(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEq(clProto), clError(clProto), clExtraArgs(clProto),
  clFindClass(clProto), clFloat(clProto), clFlonumToString(clProto),
  clFloor(clProto), clFormatExpAux(clProto),
  clFormatExponentMarker(clProto), clFormatFixedAux(clProto),
  clFormatGeneralAux(clProto), clFormatPrintCardinal(clProto),
  clFormatPrintCardinalAux(clProto),
  clFormatPrintSmallCardinal(clProto), clFormatWriteField(clProto),
  clGeInteger(clProto), clGetOutputStreamString(clProto),
  cl_SETF_GlobalDeclaration(clProto), clIntegerp(clProto),
  clLength(clProto), clList(clProto), clLog(clProto),
  clMakeGeneralVector __P((clObject)), clMakeKeyword(clProto),
  clMax(clProto), clMin(clProto), clMinusp(clProto),
  clMissingArgs(clProto), clMultipleChars1(clProto), clNot(clProto),
  clNreconc(clProto), clNthcdr(clProto), clNull(clProto),
  clNullStreamP(clProto), clPlusp(clProto), clPrin1(clProto),
  clRealp(clProto), clRedefineConstant(clProto), clReduce(clProto),
  clRest(clProto), clScaleExponent(clProto), clSvref(clProto),
  cl_SETF_Svref(clProto), clTailPos(clProto), clTruncate(clProto),
  clValues(clProto), clWrite(clProto), clWriteChar(clProto),
  clWriteString(clProto), clWriteToString(clProto), clZerop(clProto);

clObject clAddExternalVariable(clProto), clApply(clProto),
  clBoundp(clProto), clCanonicalizeSpecializer(clProto),
  clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clClassp(clProto), clCombineResults(clProto),
  clCompilerEnvFunctions(clProto), clCompilerEnvInits(clProto),
  clCons(clProto), clCopyStructure(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clExtraArgs(clProto), clFileCompilerEnvConstants(clProto),
  clFindClass(clProto), cl_SETF_GlobalDeclaration(clProto),
  clInitializeCommonInternedObjects(clProto), clIntern(clProto),
  clKeyArg(clProto), clList(clProto), clMakeFileCompilerEnv(clProto),
  clMakeHashTable(clProto), clMakeKeyword(clProto),
  clMakeStructure(clProto), clMissingArgs(clProto), clNot(clProto),
  clNull(clProto), clPkg(clProto), clRest(clProto),
  clStructref(clProto), cl_SETF_Structref(clProto),
  clWalkLiteral(clProto);

clObject clMINUS_FUNC(clProto), cl1PLUS_FUNC(clProto),
  clApply(clProto), clCanonicalizeSpecializer(clProto), clCar(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clClassOf(clProto), clClearOutput(clProto), clCons(clProto),
  clDeleteFile(clProto), clDrain __P((clObject)), clEndp(clProto),
  clEnsureClass(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clExpungeFile(clProto),
  clExtraArgs(clProto), clFastFindSlot __P((clObject, clObject)),
  clFileDescriptorClose __P((clObject)), cl_SETF_FillPointer(clProto),
  clFillPointer(clProto), clFindClass(clProto),
  clFinishOutput(clProto), clFlushInput __P((clObject)),
  clFlushOutput __P((clObject)), clGetSimpleVector(clProto),
  clInitializeSlotP(clProto), clKeyArg(clProto), clLength(clProto),
  clList(clProto), clMakeArray(clProto), clMakeBuffer(clProto),
  clMakeKeyword(clProto), clMissingArgs(clProto), clNot(clProto),
  clNull(clProto), clOutputStream(clProto), clPlusp(clProto),
  clPoll __P((clObject)), clPosition(clProto), clPrinc(clProto),
  clPrintUnreadableObjectHeader(clProto),
  clPrintUnreadableObjectTrailer(clProto),
  clReadAscii __P((clObject, clObject, clObject, clObject)),
  clReadBes16 __P((clObject, clObject, clObject, clObject)),
  clReadBes32 __P((clObject, clObject, clObject, clObject)),
  clReadBes8 __P((clObject, clObject, clObject, clObject)),
  clReadBeu16 __P((clObject, clObject, clObject, clObject)),
  clReadBeu32 __P((clObject, clObject, clObject, clObject)),
  clReadBeu8 __P((clObject, clObject, clObject, clObject)),
  clReadLes16 __P((clObject, clObject, clObject, clObject)),
  clReadLes32 __P((clObject, clObject, clObject, clObject)),
  clReadLes8 __P((clObject, clObject, clObject, clObject)),
  clReadLeu16 __P((clObject, clObject, clObject, clObject)),
  clReadLeu32 __P((clObject, clObject, clObject, clObject)),
  clReadLeu8 __P((clObject, clObject, clObject, clObject)),
  clReadMb __P((clObject, clObject, clObject, clObject, clObject)),
  clReadUcs2 __P((clObject, clObject, clObject, clObject)),
  clReadUcs4 __P((clObject, clObject, clObject, clObject)),
  clRenameFile(clProto), clRest(clProto), cl_SETF_SlotValue(clProto),
  clWriteAscii __P((clObject, clObject, clObject, clObject)),
  clWriteBes16 __P((clObject, clObject, clObject, clObject)),
  clWriteBes32 __P((clObject, clObject, clObject, clObject)),
  clWriteBes8 __P((clObject, clObject, clObject, clObject)),
  clWriteBeu16 __P((clObject, clObject, clObject, clObject)),
  clWriteBeu32 __P((clObject, clObject, clObject, clObject)),
  clWriteBeu8 __P((clObject, clObject, clObject, clObject)),
  clWriteLes16 __P((clObject, clObject, clObject, clObject)),
  clWriteLes32 __P((clObject, clObject, clObject, clObject)),
  clWriteLes8 __P((clObject, clObject, clObject, clObject)),
  clWriteLeu16 __P((clObject, clObject, clObject, clObject)),
  clWriteLeu32 __P((clObject, clObject, clObject, clObject)),
  clWriteLeu8 __P((clObject, clObject, clObject, clObject)),
  clWriteMb __P((clObject, clObject, clObject, clObject)),
  clWriteUcs2 __P((clObject, clObject, clObject, clObject)),
  clWriteUcs4 __P((clObject, clObject, clObject, clObject));

clObject clAddTarget(clProto), clApply(clProto),
  clApplyInterpretedFunction(clProto), clBreak(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCarEq(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCheckKeys(clProto), clClosureValue(clProto),
  clCombineResults(clProto), clCons(clProto), clConsp(clProto),
  clDirectory(clProto), clEndp(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEq(clProto), clError(clProto), clEvalEnv(clProto),
  clEvaluationProgress(clProto), clExtraArgs(clProto),
  cl_SETF_Fdefinition(clProto), clFindClass(clProto),
  clFindRestart(clProto), clFormatGroupedInteger(clProto),
  clFreshLine(clProto), clFuncall(clProto), clGensym(clProto),
  cl_SETF_GlobalDeclaration(clProto), clIntern(clProto),
  clInterpretedCall(clProto), clInvokeRestart(clProto),
  clKeyArg(clProto), clList(clProto), clListSTAR(clProto),
  clLoadPathname(clProto), clMacroFunction(clProto),
  cl_SETF_MacroFunction(clProto), clMakeBoundaryEnv(clProto),
  clMakeByteFileCompilerEnv(clProto), clMakeCFileCompilerEnv(clProto),
  clMakeHandler(clProto), clMakeHashTable(clProto),
  clMakeKeyword(clProto), clMakeMultipleValuesTarget(clProto),
  clMakePathname(clProto), clMakeRestart(clProto),
  clMakeResult(clProto), clMakeSymbol(clProto), clMakeTargets(clProto),
  clMergePathnames(clProto), clMissingArgs(clProto),
  clMultipleValuesTargetValues(clProto), clNot(clProto),
  clNull(clProto), clOpen(clProto), clPathnameName(clProto),
  clPathnameType(clProto), clPathnameVersion(clProto), clRead(clProto),
  clRest(clProto), clStringEQUAL(clProto), clSymbolp(clProto),
  clTerpri(clProto), clValues(clProto), clValuesList(clProto),
  clWalk(clProto), clWalk1(clProto), clWalkhook(clProto),
  clWarn(clProto), clWriteToplevel(clProto);

clObject cl1PLUS_FUNC(clProto), clAddInteger(clProto),
  clAllocateResource(clProto), clApply(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharEqual(clProto), clCharUpcase(clProto),
  clCharpSimpleBaseString __P((clCharp)), clClassOf(clProto),
  clCons(clProto), clDeallocateResource(clProto), clEndp(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEq(clProto), clExpandType(clProto), clExtraArgs(clProto),
  clFastFind __P((clObject, clObject)), clFindClass(clProto),
  clFirstNonEmptyIndex __P((clObject, clObject)), clGeInteger(clProto),
  cl_SETF_Get(clProto), clGetResourceParameters(clProto),
  cl_SETF_GlobalDeclaration(clProto),
  clHashTableKey __P((clObject, clObject)),
  clHashTableNBuckets(clProto),
  clHashTableValue __P((clObject, clObject)), clLength(clProto),
  clList(clProto), clMakeHashTable(clProto), clMakeKeyword(clProto),
  clMakeResource(clProto), clMakeSymbol(clProto),
  clMissingArgs(clProto), clNot(clProto), clNull(clProto),
  cl_SETF_ResourceParameters(clProto), clResourceParameters(clProto),
  clRest(clProto), clStructref(clProto), clSxhash(clProto),
  clSymbolName(clProto), clSymbolPackage(clProto), clTruncate(clProto),
  clValues(clProto), clZerop(clProto);

clObject cl1PLUS_FUNC(clProto), clAppend(clProto), clApply(clProto),
  clAtom(clProto), cl_SETF_BindingDeclarations(clProto),
  clBindingDeclarations(clProto), clBindingName(clProto),
  clBindingP(clProto), clBindingStatus(clProto),
  cl_SETF_BoundaryEnvEnclosedBindings(clProto),
  clBoundaryEnvEnclosedBindings(clProto), clBoundaryEnvP(clProto),
  clCanonicalizeDeclarations(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCarEq(clProto),
  clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clClassp(clProto), clCons(clProto), clConsp(clProto),
  clConstantp(clProto), clCopyStructure(clProto), clCountIf(clProto),
  clEndp(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEnvEnv(clProto), clEnvP(clProto),
  clEq(clProto), clEql(clProto), clError(clProto), clEvery(clProto),
  clExpandType(clProto), clExtraArgs(clProto),
  clFastFind __P((clObject, clObject)), clFdefinition1(clProto),
  clFind(clProto), clFindClass(clProto), clFindType(clProto),
  clFirst(clProto), cl_SETF_FrameBindings(clProto),
  clFrameBindings(clProto), clFrameEnv(clProto), clFuncall(clProto),
  clFunctionNameKey(clProto), clGensym(clProto), clGetf(clProto),
  cl_SETF_GlobalDeclaration(clProto), clGlobalDeclaration(clProto),
  clGlobalSymbolMacroFunction(clProto), clGloballySpecialP(clProto),
  clIndexBinding(clProto), clIntern(clProto), clKeyArg(clProto),
  clLength(clProto), clLevelStructurePrinter(clProto), clList(clProto),
  clListSTAR(clProto), cl_SETF_MacroFunction(clProto),
  clMacroFunctionEnvP(clProto), clMacroFunctionP(clProto),
  clMacroVariableEnvP(clProto), clMakeCapturedBinding(clProto),
  clMakeEnvBinding(clProto), clMakeFunctionEnv(clProto),
  clMakeHashTable(clProto), clMakeKeyword(clProto),
  clMakeLexicalFunction(clProto), clMakeMacroBinding(clProto),
  clMakeMacroFunctionEnv(clProto), clMakeMacroVariableEnv(clProto),
  clMakeStructure(clProto), clMakeSymbol(clProto),
  clMakeSymbolMacroBinding(clProto),
  clMakeSymbolMacroFunction(clProto), clMakeVar(clProto),
  clMakeVariableEnv(clProto), clMapcar(clProto),
  clMissingArgs(clProto), clNconc(clProto), clNot(clProto),
  clNull(clProto), clOutputStream(clProto), clPkg(clProto),
  clPrinc(clProto), clPrintUnreadableObjectHeader(clProto),
  clPrintUnreadableObjectTrailer(clProto), clPutf(clProto),
  clRest(clProto), clRplaca(clProto), clRplacd(clProto),
  clSecond(clProto), clSetfFunctionNameP(clProto),
  clSpecialBindingP(clProto), clSpecialOperatorP(clProto),
  clStringEQUAL(clProto), clStructref(clProto),
  cl_SETF_Structref(clProto), clSymbolPackage(clProto),
  clSymbolp(clProto), clValues(clProto), clWarn(clProto),
  clWrite(clProto), clWriteChar(clProto), clZerop(clProto);

clObject clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCons(clProto),
  clConsp(clProto), clDelete(clProto), clEndp(clProto),
  clError(clProto), clExtraArgs(clProto), clFind(clProto),
  clIntern(clProto), clList(clProto), clListSTAR(clProto),
  clListp(clProto), cl_SETF_MacroFunction(clProto),
  clMakeKeyword(clProto), clMapcar(clProto), clMissingArgs(clProto),
  clParseMacro(clProto), clPkg(clProto), clValues(clProto);

clObject clCharpSimpleBaseString __P((clCharp)), clExtraArgs(clProto),
  clFboundp(clProto), clFuncall(clProto), clMakeKeyword(clProto),
  clMissingArgs(clProto), clSetFuncallableInstanceFunction(clProto),
  clSymbolFunction(clProto);

clObject clApply(clProto), clCanonicalizeSpecializer(clProto),
  clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCons(clProto),
  clDocData(clProto), cl_SETF_DocData(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEq(clProto), clError(clProto), clExtraArgs(clProto),
  clFindClass(clProto), clFindMethodCombinationType(clProto),
  cl_SETF_Get(clProto), clGet(clProto), clGetf(clProto),
  clInternEqlSpecializer(clProto), clList(clProto),
  clMakeKeyword(clProto), clMissingArgs(clProto), clNot(clProto),
  clNull(clProto), clPutf(clProto), clRest(clProto);

clObject clApply(clProto), clCadadr(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCarEq(clProto),
  clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clCons(clProto), clConsesWithCars(clProto), clConsp(clProto),
  clCopyHashTable(clProto), clCopyList(clProto), clDelete(clProto),
  clDerivedTypeP(clProto), clDispatchClasses(clProto),
  clDispatchOthers(clProto), cl_SETF_DispatchOthers(clProto),
  clEndp(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEnterInOthers(clProto),
  clEnterInSubtable(clProto), clEntryPprintFunction(clProto),
  clEntryPriority(clProto), clEntryTypeSpec(clProto), clEq(clProto),
  clEql(clProto), clEqlSpecializerObject(clProto),
  clEqlSpecializerP(clProto), clError(clProto), clExtraArgs(clProto),
  clFind(clProto), clFindClass(clProto), clFindType(clProto),
  clFits(clProto), clGetPrinter(clProto),
  cl_SETF_GlobalDeclaration(clProto), clKeyArg(clProto),
  clList(clProto), clMakeDispatchEntry(clProto),
  clMakeHashTable(clProto), clMakeKeyword(clProto),
  clMakePprintDispatch(clProto), clMakeStructure(clProto),
  clMakeSymbol(clProto), clMissingArgs(clProto), clNot(clProto),
  clNull(clProto), clOutputStream(clProto),
  clPrintUnreadableObjectHeader(clProto),
  clPrintUnreadableObjectTrailer(clProto), clPriorityGREATER(clProto),
  clRest(clProto), clRplaca(clProto), clRplacd(clProto),
  clSecond(clProto), clSetPprintDispatchPLUS(clProto),
  clSpecifierCategory(clProto), cl_SETF_Structref(clProto),
  clStructref(clProto), clSymbolp(clProto), clValues(clProto);

clObject clMINUS_FUNC(clProto), cl1PLUS_FUNC(clProto),
  cl1MINUS_FUNC(clProto), clAddInteger(clProto),
  clAllocateResource(clProto), clAppend(clProto), clApply(clProto),
  clAref(clProto), clArgs(clProto), clAssoc(clProto),
  clAtsignp(clProto), clBadReaderParameter(clProto), clCaddr(clProto),
  clCadr(clProto), clCanonicalizeSpecializer(clProto), clCar(clProto),
  clCdddr(clProto), clCddr(clProto), clCdr(clProto),
  clCharDowncase(clProto), clCharUpcase(clProto), clCharEQUAL(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clChunkUp(clProto), clCoerce(clProto), clColonp(clProto),
  clCompile(clProto), clCompileFormat(clProto), clCons(clProto),
  clConsp(clProto), clDeallocateResource(clProto),
  clDecimalString(clProto), clDirectiveStart(clProto),
  clEnsureClass(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clEql(clProto),
  clError(clProto), clExpandFormatString(clProto),
  clExtraArgs(clProto), cl_SETF_FillPointer(clProto),
  clFillTransformString(clProto), clFind(clProto),
  clFindClass(clProto), clFindIf(clProto), clFindIfNot(clProto),
  clFindPackage(clProto), clFirst(clProto), clFloatp(clProto),
  clFlonumToString(clProto), clFormatError(clProto),
  clFormatParameter(clProto), clFormatParameterBinding(clProto),
  clFormatParameterBindingP(clProto), clFormatWriteField(clProto),
  clFuncall(clProto), clGeInteger(clProto), clGentemp(clProto),
  cl_SETF_Get(clProto), clGetArg(clProto),
  cl_SETF_GlobalDeclaration(clProto), clHandleLogicalBlock(clProto),
  clHandleStandardLESS(clProto), clInitial(clProto), clIntern(clProto),
  clKeyArg(clProto), clLength(clProto), clList(clProto),
  clListSTAR(clProto), cl_SETF_MacroFunction(clProto),
  clMakeArray(clProto), clMakeBindingForm(clProto),
  clMakeHashTable(clProto), clMakeKeyword(clProto),
  clMakeName(clProto), clMakePaddedFormatter(clProto),
  clMakeRadixFormatter(clProto), clMakeRadixFormatter1(clProto),
  clMakeResource(clProto), clMapc(clProto), clMapcar(clProto),
  clMaybeCompileFormatString(clProto), clMinusp(clProto),
  clMissingArgs(clProto), clMultipleChars(clProto),
  clMultipleNewlines(clProto), clNextDirective(clProto),
  clNextDirective1(clProto), clNot(clProto), clNreconc(clProto),
  clNth(clProto), clNull(clProto), clNumArgs(clProto),
  clOuterArgs(clProto), clPackageName(clProto), clParamsEnd(clProto),
  clParseInteger(clProto), clParseParams(clProto), clPosition(clProto),
  clPositionIfNot(clProto), clPositionNotIn(clProto),
  clProcessFormatString(clProto), clPushFill(clProto),
  clRationalp(clProto), clRead(clProto),
  cl_SETF_ResourceParameters(clProto), clResourceParameters(clProto),
  clRest(clProto), clSecond(clProto), clString(clProto),
  clStringUpcase(clProto), clStringEQUAL(clProto), clStringp(clProto),
  clUnreadChar(clProto), clValues(clProto),
  clVectorPushExtend(clProto), clWriteChar(clProto),
  clWriteString(clProto), clZerop(clProto);

clObject clAppend(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCons(clProto),
  clConsp(clProto), clExtraArgs(clProto), clFindDeclarations(clProto),
  clFindType(clProto), clFuncallableStandardInstanceAccess(clProto),
  clGensym(clProto), clList(clProto), clListSTAR(clProto),
  cl_SETF_MacroFunction(clProto), clMakeKeyword(clProto),
  clMakeMethodLambdaList(clProto), clMakeStandInMethod(clProto),
  clMakeStandardInstanceFromSlots __P((clObject, clObject, clObject)),
  clMakeStaticSlots __P((clObject, ...)), clMissingArgs(clProto),
  clParseMacro(clProto), clRest(clProto), clSecond(clProto),
  clSpecializerDeclarations(clProto),
  clStandardInstanceAccess(clProto), clValues(clProto);

clObject cl1PLUS_FUNC(clProto), clApply(clProto), clAtom(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCddr(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCons(clProto), clDescribeHeader(clProto),
  clDescribeTrailer(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clEql(clProto),
  clError(clProto), clExtraArgs(clProto), clFindClass(clProto),
  clFormatGroupedInteger(clProto), clIntInteger __P((int)),
  clKeyArg(clProto), clLength(clProto), clList(clProto),
  clMakeKeyword(clProto), clMissingArgs(clProto), clNot(clProto),
  clNull(clProto), clOutputStream(clProto), clPprintNewline(clProto),
  clPprintToplevel(clProto), clRest(clProto), clRplacd(clProto),
  clTerpri(clProto), clTypeOf(clProto), clWriteChar(clProto),
  clWriteToplevel(clProto);

clObject cl1PLUS_FUNC(clProto), clAddInteger(clProto),
  clApply(clProto), clArrayDimensions(clProto), clBoundp(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clClassOf(clProto),
  clCons(clProto), clDescribeHeader(clProto),
  clDescribeStructure(clProto), clDescribeTrailer(clProto),
  clEndp(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clExtraArgs(clProto), clFboundp(clProto),
  clFillPointer(clProto), clFindClass(clProto),
  clFirstNonEmptyIndex __P((clObject, clObject)), clFixnump(clProto),
  clGeInteger(clProto), clHashTableKey __P((clObject, clObject)),
  clHashTableNBuckets(clProto),
  clHashTableValue __P((clObject, clObject)),
  clIntegerDecodeFloat(clProto), clIntegerXint __P((clObject)),
  clList(clProto), clMakeKeyword(clProto), clMapcar(clProto),
  clMissingArgs(clProto), clNot(clProto), clNull(clProto),
  clOutputStream(clProto), clPprintToplevel(clProto),
  clRemove(clProto), clRest(clProto), clSlotBoundp(clProto),
  clSlotValue(clProto), clSymbolFunction(clProto),
  clSymbolName(clProto), clSymbolPackage(clProto),
  clSymbolPlist(clProto), clTypeOf(clProto), clWriteChar(clProto);

clObject cl1PLUS_FUNC(clProto), cl1MINUS_FUNC(clProto),
  clApply(clProto), clAtom(clProto), clBoundp(clProto),
  clBqStructCode(clProto), clBqStructData(clProto),
  clBqStructP(clProto), clBqtify(clProto), clBqtifyInline(clProto),
  clButlast(clProto), clCaar(clProto), clCadar(clProto),
  clCadr(clProto), clCar(clProto), clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clClassp(clProto), clCons(clProto), clConsp(clProto),
  clCopyPprintDispatch(clProto), clCopyStructure(clProto),
  clEq(clProto), clExtraArgs(clProto), clFboundp(clProto),
  clFnCall(clProto), clFuncall(clProto),
  cl_SETF_GlobalDeclaration(clProto), clKeyArg(clProto),
  clLast(clProto), clLength(clProto), clList(clProto),
  clListp(clProto), clMakeBqStruct(clProto), clMakeKeyword(clProto),
  clMakeStructure(clProto), clMapcar(clProto), clMapcon(clProto),
  clMinusp(clProto), clMissingArgs(clProto), clNconc(clProto),
  clNot(clProto), clNull(clProto), clNumberp(clProto),
  clOutputStream(clProto), clPprintFill(clProto),
  clPprintIndent(clProto), clPprintNewline(clProto),
  clPprintTab(clProto), clPprintToplevel(clProto),
  clPrintElementAbortedP(clProto), clPrintFancyFnCall(clProto),
  clSetPprintDispatchPLUS(clProto), clString(clProto),
  clStringEQUAL(clProto), clStringp(clProto), clStructref(clProto),
  cl_SETF_Structref(clProto), clSymbolFunction(clProto),
  clSymbolName(clProto), clSymbolp(clProto), clTokenType(clProto),
  clWrite(clProto), clWriteChar(clProto), clWriteCharPLUSPLUS(clProto),
  clWriteStringPLUSPLUS(clProto), clWriteToplevel(clProto),
  clZerop(clProto);

clObject cl1PLUS_FUNC(clProto), clAllocateResource(clProto),
  clApply(clProto), clCanonicalizeSpecializer(clProto), clCar(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clClearInput(clProto), clComputeRestarts(clProto), clCons(clProto),
  clDeallocateResource(clProto), clDisplayRestarts(clProto),
  clEndp(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clEval(clProto),
  clEvalOrCommand(clProto), clExpandType(clProto),
  clExtraArgs(clProto), clFind(clProto), clFindClass(clProto),
  clFindRestart(clProto), clFinishOutput(clProto), clFirst(clProto),
  clFormatGroupedInteger(clProto), clFreshLine(clProto),
  clFuncall(clProto), clGetOutputStreamString(clProto),
  cl_SETF_GlobalDeclaration(clProto), clInvokeRestart(clProto),
  clInvokeRestartInteractively(clProto), clLength(clProto),
  clLispImplementationType(clProto),
  clLispImplementationVersion(clProto), clList(clProto),
  clLoad(clProto), clMakeBroadcastStream(clProto),
  clMakeCondition(clProto), clMakeEchoStream(clProto),
  clMakeHandler(clProto), clMakeKeyword(clProto),
  clMakePathname(clProto), clMakeRestart(clProto),
  clMakeSymbol(clProto), clMakeTwoWayStream(clProto),
  clMissingArgs(clProto), clNot(clProto), clNth(clProto),
  clNthcdr(clProto), clNull(clProto), clOpen(clProto),
  clOutputStream(clProto), clPadChars(clProto), clPrinc(clProto),
  clRead(clProto), clReadCharNoHang(clProto),
  clReadEvalPrintLoop(clProto), clReportCondition(clProto),
  clRest(clProto), clRestartName(clProto),
  clRestartReportFunction(clProto), clTerpri(clProto),
  clUnreadChar(clProto), clUserHomedirPathname(clProto),
  clValues(clProto), clWhitespaceCharP(clProto), clWriteLine(clProto),
  clWriteString(clProto), clWriteToplevel(clProto),
  clYesOrNoP(clProto), clZerop(clProto);

clObject cl1MINUS_FUNC(clProto), clApply(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCons(clProto),
  clDoubleDoubleFloat __P((double)), clDoubleFloatP(clProto),
  clDoubleSingleFloat __P((double)), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clError(clProto), clExtraArgs(clProto),
  clFceilingDoubleFloat __P((clObject)),
  clFceilingSingleFloat __P((clObject)),
  clFfloorDoubleFloat __P((clObject)),
  clFfloorSingleFloat __P((clObject)), clFindClass(clProto),
  clFixnump(clProto), clFloat(clProto),
  clFloat2DoubleFloatSingleFloat(clProto),
  clFloat2IntegerDoubleFloat(clProto),
  clFloat2IntegerSingleFloat(clProto),
  clFloat2RatioDoubleFloat(clProto), clFloat2RatioSingleFloat(clProto),
  clFloat2SingleFloatDoubleFloat(clProto),
  clFroundDoubleFloat __P((clObject)),
  clFroundSingleFloat __P((clObject)),
  clFtruncateDoubleFloat __P((clObject)),
  clFtruncateSingleFloat __P((clObject)),
  clIntegerXint __P((clObject)), clList(clProto),
  clMakeKeyword(clProto), clMakeRatio __P((clObject, clObject)),
  clMinusp(clProto), clMissingArgs(clProto), clNot(clProto),
  clNull(clProto), clOddp(clProto), clPlusp(clProto), clRest(clProto),
  clTruncXint(clProto), clTruncateDoubleFloat __P((clObject)),
  clTruncateSingleFloat __P((clObject)), clValues(clProto),
  clXintInteger(clProto), clZerop(clProto);

clObject clApply(clProto), clAtom(clProto), clBoundp(clProto),
  clCanonicalizeDeclarations(clProto), clCar(clProto), clCddr(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCons(clProto), clConstantp(clProto), clEq(clProto),
  clError(clProto), clExtraArgs(clProto), clFunctionNameKey(clProto),
  cl_SETF_Get(clProto), clGlobalDeclaration(clProto),
  cl_SETF_GlobalDeclaration(clProto), clIntern(clProto),
  clKeywordp(clProto), clList(clProto), clListSTAR(clProto),
  cl_SETF_MacroFunction(clProto), clMakeKeyword(clProto),
  clMap1(clProto), clMissingArgs(clProto), clPkg(clProto),
  clRedefineConstant(clProto), clSetfFunctionNameP(clProto);

clObject clApply(clProto), clCar(clProto), clCddr(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clEndp(clProto), clEq(clProto), clEql(clProto), clError(clProto),
  clExtraArgs(clProto), clFindBadKey(clProto), clGetf(clProto),
  clMakeKeyword(clProto), clMissingArgs(clProto), clNot(clProto),
  clSignalProgramError(clProto), clSymbolp(clProto);

clObject clAddInteger(clProto), clAppend(clProto), clCar(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCheckKeys(clProto), clCons(clProto), clConstantp(clProto),
  clCopyList(clProto), clDoBody(clProto), clEndp(clProto),
  clEq(clProto), clError(clProto), clExtraArgs(clProto),
  clFindDeclarations(clProto), clFirst(clProto), clGeInteger(clProto),
  clGenerateSetfMethod(clProto), clGensym(clProto),
  clGetSetfExpansion(clProto), clKeyArg(clProto), clLength(clProto),
  clList(clProto), clListSTAR(clProto), clListp(clProto),
  cl_SETF_MacroFunction(clProto), clMakeKeyword(clProto),
  clMakeSymbols(clProto), clMapcan(clProto), clMapcar(clProto),
  clMissingArgs(clProto), clNot(clProto), clNull(clProto),
  clRplacd(clProto), clSecond(clProto), cl_SETF_SetfExpander(clProto),
  clSignalProgramError(clProto), clThird(clProto), clValues(clProto);

clObject clAdjoin(clProto), clAppend(clProto), clAtom(clProto),
  clBindingformName(clProto), clCadr(clProto), clCar(clProto),
  clCarEq(clProto), clCaseKeys(clProto), clCddr(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCons(clProto), clConsp(clProto), clDestructureLambda(clProto),
  clEndp(clProto), clEq(clProto), clEqTestP(clProto), clEvery(clProto),
  clExpandType(clProto), clExtraArgs(clProto),
  clFindDeclarations(clProto), clFirst(clProto), clFixnump(clProto),
  clGenerateSetfMethod(clProto), clGensym(clProto),
  clGetSetfExpansion(clProto), clLast(clProto), clLength(clProto),
  clList(clProto), clListSTAR(clProto), cl_SETF_MacroFunction(clProto),
  clMakeBindingList(clProto), clMakeKeyword(clProto),
  clMakeList(clProto), clMakeSymbols(clProto), clMapc(clProto),
  clMissingArgs(clProto), clNconc(clProto), clNot(clProto),
  clNsetDifference(clProto), clNull(clProto), clNumberp(clProto),
  clParseLambda(clProto), clProperName(clProto), clRest(clProto),
  clRplacd(clProto), clSecond(clProto), cl_SETF_SetfExpander(clProto),
  clSignalProgramError(clProto), clSubst(clProto), clSymbolp(clProto),
  clUnionTypes(clProto), clValues(clProto);

clObject clAppend(clProto), clAtom(clProto),
  clBindFormFromCase(clProto), clButlast(clProto), clCar(clProto),
  clCaseKeys(clProto), clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCons(clProto),
  clConsp(clProto), clDelete(clProto), clEndp(clProto), clEq(clProto),
  clExtraArgs(clProto), clFind(clProto), clFirst(clProto),
  clFuncall(clProto), clGensym(clProto), clLast(clProto),
  clList(clProto), clListSTAR(clProto), cl_SETF_MacroFunction(clProto),
  clMacroexpand(clProto), clMakeConditionBindings(clProto),
  clMakeKeyword(clProto), clMapcar(clProto), clMissingArgs(clProto),
  clNot(clProto), clRest(clProto), clRplacd(clProto),
  clSecond(clProto), clStringp(clProto), clSymbolName(clProto),
  clWarn(clProto);

clObject cl1PLUS_FUNC(clProto), clApply(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharacterp(clProto), clCharpSimpleBaseString __P((clCharp)),
  clClassOf(clProto), clCons(clProto), clEndp(clProto),
  clEnsureClass(clProto), clEnsureElementTypeCompatibility(clProto),
  clEnsureGenericFunction(clProto), clEnsureInputStream(clProto),
  clEnsureMethod(clProto), clEnsureOutputStream(clProto),
  clEq(clProto), clEql(clProto), clError(clProto), clEvery(clProto),
  clExtraArgs(clProto), clFastFindSlot __P((clObject, clObject)),
  clFindClass(clProto), clFindType(clProto), clFinishOutput(clProto),
  clFirst(clProto), clInitilizeStreamVariables(clProto),
  clInteractivep __P((clObject)), clKeyArg(clProto), clLast(clProto),
  clLength(clProto), clList(clProto), clMakeArray(clProto),
  clMakeBidirectionalStream(clProto), clMakeBroadcastStream(clProto),
  clMakeKeyword(clProto), clMakeSynonymStream(clProto),
  clMakeTwoWayStream(clProto), clMissingArgs(clProto), clNot(clProto),
  clNull(clProto), clOutputStream(clProto), clPrinc(clProto),
  clPrintUnreadableObjectHeader(clProto),
  clPrintUnreadableObjectTrailer(clProto), clRest(clProto),
  clValues(clProto);

clObject clBoundp(clProto), clCadr(clProto), clCar(clProto),
  clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCons(clProto),
  clConsp(clProto), clConstantp(clProto), clEndp(clProto),
  clEq(clProto), clError(clProto), clExtraArgs(clProto),
  clFuncall(clProto), clGet(clProto), cl_SETF_Get(clProto),
  clGetf(clProto), cl_SETF_GlobalDeclaration(clProto), clList(clProto),
  clListp(clProto), clMakeKeyword(clProto), clMissingArgs(clProto),
  clNot(clProto), clNull(clProto), clPutf(clProto),
  clRedefineConstant(clProto), clRplaca(clProto), clSecond(clProto),
  clSetfFunctionNameP(clProto), clSignalProgramError(clProto),
  clSymbolp(clProto), clWarn(clProto);

clObject clAppend(clProto), clApply(clProto), clCar(clProto),
  clCarEq(clProto), clCdr(clProto), clCons(clProto), clEndp(clProto),
  clExtraArgs(clProto), clFindDeclarations(clProto),
  clFindPackage(clProto), clIntern(clProto), clList(clProto),
  clListSTAR(clProto), cl_SETF_MacroFunction(clProto),
  clMakeSymbol(clProto), clMakeSymbols(clProto), clMapc(clProto),
  clMapcar(clProto), clMissingArgs(clProto), clNot(clProto),
  clRplacd(clProto), cl_SETF_SetfExpander(clProto), clString(clProto),
  clStringp(clProto), clSymbolName(clProto), clValues(clProto);

clObject cl1MINUS_FUNC(clProto), clAtom(clProto), clCar(clProto),
  clCdr(clProto), clCompare(clProto), clEndp(clProto), clEq(clProto),
  clExtraArgs(clProto), clFuncall(clProto), clHighlow(clProto),
  clKeyItem(clProto), clMinusp(clProto), clMissingArgs(clProto),
  clQuicksortList(clProto), clRplaca(clProto), clRplacd(clProto),
  clValues(clProto);

clObject clSubtIntegerInteger(clObject,clObject), clLtIntegerInteger(clObject,clObject);
clObject cl1MINUS_FUNC(clProto),
  clAddIntegerInteger __P((clObject, clObject)),
  clAdjustedLambdaBindings(clProto), clAppend(clProto),
  clApply(clProto), clApplyFunction(clProto),
  clBindingformInitform(clProto), clBindingformName(clProto),
  clCallMethodMacrolet(clProto), clCanonicalizeClass(clProto),
  clCar(clProto), clCarEq(clProto), clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)),
  clCheckCongruentLambda(clProto), clCheckKeys(clProto),
  clCheckSlotInitializationP(clProto), clClassOf(clProto),
  clClassp(clProto), clComputeEffectiveMethodFunction(clProto),
  clComputeMethodFunction(clProto),
  clComputeStandardEffectiveMethodFunction(clProto), clCons(clProto),
  clConsp(clProto), clEmfTableGet __P((clObject, clObject, clObject)),
  clEmfTableSet __P((clObject, clObject, clObject, clObject)),
  clEndp(clProto), clEq(clProto), clEql(clProto),
  clEqlSpecializerObject(clProto), clEqlSpecializerP(clProto),
  clError(clProto), clExtraArgs(clProto), clExtractKeywords(clProto),
  clFastFind __P((clObject, clObject)),
  clFastFindSlot __P((clObject, clObject)), clFind(clProto),
  clFindBadKey(clProto), clFindType(clProto), clFirst(clProto),
  clGenericFunctionAMPERSANDRestIndex(clProto), clGensym(clProto),
  cl_SETF_GlobalDeclaration(clProto), clIllegalChangeClass(clProto),
  clInvalidMethodError(clProto), clKeyNotAllowed(clProto),
  clLambdaAMPERSANDRestIndex(clProto), clLambdaListKeywordP(clProto),
  clLength(clProto), clList(clProto), clListSTAR(clProto),
  clListEq(clProto), clListp(clProto), clLocalSlotP(clProto),
  cl_SETF_MacroFunction(clProto), clMakeEffectiveMethodLambda(clProto),
  clMakeInternalMethod(clProto), clMakeKeyword(clProto),
  clMakeMethodExpansion(clProto), clMakeSlots __P((clObject)),
  clMethodCombinationError(clProto), clMinusp(clProto),
  clMissingArgs(clProto), clNInstanceSlots(clProto), clNconc(clProto),
  clNot(clProto), clNreverseList(clProto), clNth(clProto),
  clNthcdr(clProto), clNull(clProto), clPlusp(clProto),
  clPosition(clProto), clQuicksortList(clProto), clRest(clProto),
  clRplacd(clProto), clSecond(clProto), clSetExclusiveOr(clProto),
  clSetFuncallableInstanceFunction(clProto),
  clSignalProgramError(clProto), clSlotBoundp(clProto),
  clStandardInstanceAccess(clProto), clStaticClassWrapper(clProto),
  clStdMethodMoreSpecificP(clProto), clSubclassp(clProto),
  clSymbolName(clProto), clSymbolp(clProto), clThird(clProto),
  clUnion(clProto), clUpdateInstance(clProto), clValues(clProto);

clObject cl1PLUS_FUNC(clProto), clAccessorSpecializers(clProto),
  clAdjoin(clProto), clApply(clProto), clAssoc(clProto),
  clAtom(clProto), clBindingformKeyword(clProto),
  clBindingformName(clProto), clCadr(clProto),
  clCanonicalizeClass(clProto), clCar(clProto), clCddr(clProto),
  clCdr(clProto), clCerror(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clClassOf(clProto), clClassp(clProto),
  clComputeClassAllocatedSlot(clProto), clCongruentLambdaP(clProto),
  clCons(clProto), clConsp(clProto), clCopyList(clProto),
  clDelete(clProto), clEndp(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethodUsingClass(clProto), clEq(clProto), clEql(clProto),
  clError(clProto), clExtraArgs(clProto),
  clFastFind __P((clObject, clObject)), clFboundp(clProto),
  clFind(clProto), clFindIf(clProto), clFindListEqEnd(clProto),
  cl_SETF_FindMethodCombinationType(clProto),
  clFindMethodCombinationType(clProto), clFindType(clProto),
  clFmakunbound(clProto), clFormatMethod(clProto), clFuncall(clProto),
  clGenericFunctionP(clProto), clGetMethod(clProto), clGetf(clProto),
  clIllegalChangeClass(clProto), clIllegalForwardReference(clProto),
  clInternInstance(clProto), clKeyArg(clProto),
  clLambdaListKeywordP(clProto), clList(clProto), clListSTAR(clProto),
  clListEq(clProto), clLocalSlotP(clProto),
  clMakeForwardReferencedClass(clProto), clMakeKeyword(clProto),
  clMapcar(clProto), clMissingArgs(clProto), clNconc(clProto),
  clNot(clProto), clNull(clProto), clPutf(clProto),
  clRemoveIf(clProto), clRest(clProto), clRplacd(clProto),
  clSecond(clProto),
  clSetFuncallableStandardInstanceFunction __P((clObject, clObject)),
  clSignalProgramError(clProto), clSlotBoundp(clProto),
  clSymbolp(clProto), clValues(clProto);

clObject clAppend(clProto), clApply(clProto), clAtom(clProto),
  clBindingformInitform(clProto), clBindingformName(clProto),
  clCar(clProto), clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clCons(clProto), clConsp(clProto), clDelete(clProto),
  clEndp(clProto), clEnsureGenericFunction(clProto), clEq(clProto),
  clEql(clProto), clError(clProto), clExpandType(clProto),
  clExtraArgs(clProto), clExtractLambdaList(clProto),
  clExtractSpecializedNames(clProto),
  clExtractSpecializerNames(clProto), clFind(clProto),
  clFindDeclarations(clProto), clFirst(clProto), clFuncall(clProto),
  clGensym(clProto), clGetf(clProto),
  cl_SETF_GlobalDeclaration(clProto), clKeyArg(clProto),
  clLambdaListKeywordP(clProto), clLast(clProto), clList(clProto),
  clListSTAR(clProto), clListp(clProto),
  cl_SETF_MacroFunction(clProto), clMakeHashTable(clProto),
  clMakeKeyword(clProto), clMakeSymbol(clProto), clMapcar(clProto),
  clMissingArgs(clProto), clMultipleAppearanceError(clProto),
  clNconc(clProto), clNot(clProto), clPosition(clProto),
  clPutf(clProto), clRest(clProto), clRplaca(clProto),
  clRplacd(clProto), clSecond(clProto), clSignalProgramError(clProto),
  clSymbolName(clProto), clValues(clProto);

clObject clCharpSimpleBaseString __P((clCharp)), clCons(clProto),
  clDoubleDoubleFloat __P((double)), clDoubleSingleFloat __P((double)),
  clExtraArgs(clProto), cl_SETF_FindType(clProto), clFindType(clProto),
  cl_SETF_GlobalDeclaration(clProto), clList(clProto),
  clMakeBaseCharVector __P((clObject)),
  clMakeBitVector __P((clObject)),
  clMakeComplex __P((clObject, clObject)),
  clMakeComplexArray __P((clObject, clObject, clObject, clObject, clObject, clObject)),
  clMakeEmfTable __P((void)), clMakeExtendedCharVector __P((clObject)),
  clMakeGeneralVector __P((clObject)), clMakeKeyword(clProto),
  clMakeRatio __P((clObject, clObject)),
  clMakeSimpleArray __P((clObject, clObject, clObject)),
  clMakeSlots __P((clObject)),
  clMakeStandardInstance __P((clObject, clObject, clObject)),
  clMakeStandardInstanceFromSlots __P((clObject, clObject, clObject)),
  clMakeStaticSlots __P((clObject, ...)),
  clStandardInstanceAccess(clProto);

clObject clAddAccessorMethods(clProto), clAdjoin(clProto),
  clApply(clProto), clAssoc(clProto), clCanonicalizeClass(clProto),
  clCanonicalizeEnsureClassArgs(clProto), clCar(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCheckForForwardReferences(clProto), clCheckMetaclass(clProto),
  clClassOf(clProto), clCollectSuperclassesSTAR(clProto),
  clCons(clProto), clCopyList(clProto), clDeleteDuplicates(clProto),
  clEndp(clProto), clEq(clProto), clEql(clProto), clError(clProto),
  clExtraArgs(clProto), clFastFind __P((clObject, clObject)),
  cl_SETF_Fdefinition(clProto), cl_SETF_FindType(clProto),
  clFindType(clProto), clFuncall(clProto),
  clFuncallableStandardInstanceAccess(clProto),
  clIllegalForwardReference(clProto), clIllegalInitialization(clProto),
  clIllegalSuperclass(clProto), clKeyArg(clProto), clLast(clProto),
  clList(clProto), clListSTAR(clProto), clLocalSlotP(clProto),
  clMakeDirectSlotDefinition(clProto), clMakeEmfTable __P((void)),
  clMakeFuncallableStandardInstanceFromSlots __P((clObject, clObject, clObject)),
  clMakeHashTable(clProto), clMakeKeyword(clProto),
  clMakeStandardInstanceFromSlots __P((clObject, clObject, clObject)),
  clMakeStaticSlots __P((clObject, ...)),
  clMakeWrapper __P((clObject)), clMapc(clProto), clMapcan(clProto),
  clMissingArgs(clProto), clMultipleAppearanceError(clProto),
  clNot(clProto), clRemove(clProto), clRemoveAccessorMethods(clProto),
  clRest(clProto), clRplacd(clProto),
  clSetFuncallableInstanceFunction(clProto), clSlotBoundp(clProto),
  cl_SETF_SlotValue(clProto),
  clStandardDiscriminatingFunction(clProto),
  clStandardInstanceAccess(clProto), clThird(clProto),
  clTopologicalSort(clProto), clUpdateInstance(clProto);

clObject cl1MINUS_FUNC(clProto), clAddInteger(clProto),
  clAllocateResource(clProto), clAtomicp(clProto), clCar(clProto),
  clCdr(clProto), clCharacterp(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCons(clProto),
  clDeallocateResource(clProto), clDispatchingPrint(clProto),
  clExtraArgs(clProto), clGeInteger(clProto), cl_SETF_Get(clProto),
  clGetResourceParameters(clProto), cl_SETF_GlobalDeclaration(clProto),
  clList(clProto), clListSTAR(clProto), cl_SETF_MacroFunction(clProto),
  clMakeBroadcastStream(clProto), clMakeHashTable(clProto),
  clMakeKeyword(clProto), clMakeResource(clProto),
  clMakeSymbol(clProto), clMinusp(clProto), clMissingArgs(clProto),
  clNot(clProto), clNull(clProto), clNumberp(clProto),
  clPrintFixnum10(clProto), clResourceParameters(clProto),
  cl_SETF_ResourceParameters(clProto), clSymbolPackage(clProto),
  clSymbolp(clProto), clWriteChar(clProto), clWriteString(clProto),
  clZerop(clProto);

clObject clLESS_FUNC(clProto), clAssoc(clProto), clCar(clProto),
  clCdr(clProto), clCharDowncase(clProto), clCharInt(clProto),
  clCharLESSEQUAL(clProto), clCharEQUAL(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clCodeChar(clProto), clCons(clProto), clDifferent(clProto),
  clEndp(clProto), clEq(clProto), clError(clProto),
  clExtraArgs(clProto), clFuncall(clProto),
  cl_SETF_GlobalDeclaration(clProto), clIntInteger __P((int)),
  clKeyArg(clProto), clLength(clProto), clLogand(clProto),
  clLogior(clProto), clLowerCaseP(clProto), clMakeKeyword(clProto),
  clMissingArgs(clProto), clMonotonic(clProto), clNot(clProto),
  clNull(clProto), clRassoc(clProto), clRest(clProto),
  clRplaca(clProto), clString(clProto), clUpperCaseP(clProto);

clObject cl1PLUS_FUNC(clProto), cl1MINUS_FUNC(clProto),
  clAddInteger(clProto), clAllocateResource(clProto),
  clAlphanumericp(clProto), clAppend(clProto), clApply(clProto),
  clAref(clProto), clAssoc(clProto), clAtom(clProto),
  clBindingDeclaration(clProto), clBindingDeclarations(clProto),
  clBindingName(clProto), clBindingP(clProto),
  clBindingStatus(clProto), clCCall(clProto), clCChar(clProto),
  clCGlobalFunction(clProto), clCGlobalSymbol(clProto),
  clCIfBody(clProto), clCIndex(clProto), clCModifier(clProto),
  clCOtherBinding(clProto), clCQualify(clProto), clCQualifyP(clProto),
  clCSymbolP(clProto), clCTypedef(clProto),
  clCVariableBinding(clProto), clCadr(clProto),
  clCapturedBlockBinding(clProto), clCapturedBlockIndex(clProto),
  clCapturedFunctionBinding(clProto), clCapturedFunctionIndex(clProto),
  clCapturedTagBinding(clProto), clCapturedTagIndex(clProto),
  clCapturedVarBinding(clProto), clCapturedVarIndex(clProto),
  clCar(clProto), clCarEq(clProto), clCdar(clProto), clCddr(clProto),
  clCdr(clProto), clCharDowncase(clProto), clCharInt(clProto),
  clCharUpcase(clProto), clCharValue(clProto), clCharEQUAL(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCharpValue(clProto),
  clCheckKeys(clProto), clCommonCToken(clProto),
  clCommonFunction(clProto), clCommonSymbol(clProto),
  clCommonVariable(clProto), clCons(clProto), clConsp(clProto),
  clConstantIdIdentifier(clProto), clConstantIdString(clProto),
  clCopyPprintDispatch(clProto), clDeallocateResource(clProto),
  clDecodeUniversalTime(clProto), clDigitCharP(clProto),
  clDoubleValue(clProto), clEndp(clProto), clEq(clProto),
  clEql(clProto), clError(clProto), clExtraArgs(clProto),
  clFindPackage(clProto), clFindSymbol(clProto), clFirst(clProto),
  clFloatValue(clProto), clFormatGroupedInteger(clProto),
  clFormatPrintOrdinal(clProto), clFourth(clProto), clFuncall(clProto),
  clFunctionp(clProto), clGeInteger(clProto),
  clGetOutputStreamString(clProto), clGetUniversalTime(clProto),
  clGetf(clProto), cl_SETF_GlobalDeclaration(clProto),
  clIndirectp(clProto), clIntValue(clProto), clIntegerp(clProto),
  clIntern(clProto), clKeyArg(clProto), clLength(clProto),
  clList(clProto), clListSTAR(clProto), clLowerCaseP(clProto),
  cl_SETF_MacroFunction(clProto), clMakeGeneralVector __P((clObject)),
  clMakeHandler(clProto), clMakeHashTable(clProto),
  clMakeKeyword(clProto), clMap(clProto), clMissingArgs(clProto),
  clMod(clProto), clNot(clProto), clNull(clProto), clNumberp(clProto),
  clOutputStream(clProto), clPackageName(clProto),
  clPackageNicknames(clProto), cl_SETF_PackagePrefix(clProto),
  clPackagePrefix(clProto), clPadChars(clProto), clPkg(clProto),
  clPositionIfNot(clProto), clPprintIndent(clProto),
  clPprintNewline(clProto), clPprintToplevel(clProto),
  clPrin1ToString(clProto), clPrinc(clProto), clPrincToString(clProto),
  clPrintElementAbortedP(clProto), clPrintIdentifier(clProto),
  clPtrue(clProto), clRest(clProto), clSblock(clProto),
  clSecond(clProto), clSeries(clProto), clSetPprintDispatch(clProto),
  clSetfFunctionNameP(clProto), clSome(clProto), clSort(clProto),
  clStandardCharP(clProto), clStatement(clProto),
  clStatements(clProto), clStringDowncase(clProto),
  clStringLESS(clProto), clStringEQUAL(clProto), clStringp(clProto),
  clSvref(clProto), cl_SETF_Svref(clProto), clSymbolFunction(clProto),
  clSymbolName(clProto), clSymbolPackage(clProto), clSymbolp(clProto),
  clThird(clProto), clTimezone(clProto), clUpperCaseP(clProto),
  clValues(clProto), clWriteChar(clProto),
  clWriteCharPLUSPLUS(clProto), clWriteString(clProto),
  clWriteStringPLUSPLUS(clProto), clWriteToplevel(clProto),
  clZerop(clProto);

clObject clAdjoin(clProto), clApply(clProto), clAtom(clProto),
  clBackupInList(clProto), clBoundp(clProto),
  clCFileCompilerEnvFunctionDeclarations(clProto),
  clCFileCompilerEnvIncludeFiles(clProto),
  cl_SETF_CFileCompilerEnvIncludeFiles(clProto),
  clCGlobalFunction(clProto), clCPrototypes(clProto),
  clCTypedef(clProto), clCanonicalizeSpecializer(clProto),
  clCar(clProto), clCdddr(clProto), clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clClassp(clProto), clCompilerEnvFunctions(clProto),
  clCompilerEnvInits(clProto), clCons(clProto),
  clCopyPprintDispatch(clProto), clCopyStructure(clProto),
  clEndp(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clEql(clProto),
  clError(clProto), clExtraArgs(clProto),
  clFileCompilerEnvConstants(clProto),
  clFileCompilerEnvExternalConstants(clProto), clFindClass(clProto),
  clFirst(clProto), clFuncall(clProto), clGetConstantsNames(clProto),
  clGetUniversalTime(clProto), clGetf(clProto),
  cl_SETF_GlobalDeclaration(clProto), clImplementationType(clProto),
  clInitializeCommonInternedObjects(clProto), clIntern(clProto),
  clKeyArg(clProto), clLispImplementationType(clProto),
  clLispImplementationVersion(clProto), clList(clProto),
  clListSTAR(clProto), clMachineInstance(clProto),
  clMakeCFileCompilerEnv(clProto), clMakeHandler(clProto),
  clMakeHashTable(clProto), clMakeKeyword(clProto),
  clMakeStructure(clProto), clMissingArgs(clProto),
  clMultipleNewlines1(clProto), clNot(clProto), clNthcdr(clProto),
  clNull(clProto), clOutputStream(clProto), clPkg(clProto),
  clPprintIndent(clProto), clPprintNewline(clProto),
  clPprintToplevel(clProto), clPrintElementAbortedP(clProto),
  clPutf(clProto), clRedefineConstant(clProto), clRest(clProto),
  clReturnType(clProto), clSort(clProto), clStructref(clProto),
  cl_SETF_Structref(clProto), clSymbolFunction(clProto),
  clTerpri(clProto), clThird(clProto), clUserId(clProto),
  clWriteChar(clProto), clWriteCharPLUSPLUS(clProto),
  clWriteString(clProto), clWriteStringPLUSPLUS(clProto),
  clWriteToplevel(clProto);

clObject clAdjoin(clProto), clApply(clProto), clAtom(clProto),
  clBackupInList(clProto), clBoundp(clProto),
  clCFileCompilerEnvFunctionDeclarations(clProto),
  clCFileCompilerEnvIncludeFiles(clProto),
  cl_SETF_CFileCompilerEnvIncludeFiles(clProto),
  clCGlobalFunction(clProto), clCPrototypes(clProto),
  clCTypedef(clProto), clCanonicalizeSpecializer(clProto),
  clCar(clProto), clCdddr(clProto), clCddr(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCheckKeys(clProto),
  clClassp(clProto), clCompilerEnvFunctions(clProto),
  clCompilerEnvInits(clProto), clCons(clProto),
  clCopyPprintDispatch(clProto), clCopyStructure(clProto),
  clEndp(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clEql(clProto),
  clError(clProto), clExtraArgs(clProto),
  clFileCompilerEnvConstants(clProto),
  clFileCompilerEnvExternalConstants(clProto), clFindClass(clProto),
  clFirst(clProto), clFuncall(clProto), clGetConstantsNames(clProto),
  clGetUniversalTime(clProto), clGetf(clProto),
  cl_SETF_GlobalDeclaration(clProto), clImplementationType(clProto),
  clInitializeCommonInternedObjects(clProto), clIntern(clProto),
  clKeyArg(clProto), clLispImplementationType(clProto),
  clLispImplementationVersion(clProto), clList(clProto),
  clListSTAR(clProto), clMachineInstance(clProto),
  clMakeCFileCompilerEnv(clProto), clMakeHandler(clProto),
  clMakeHashTable(clProto), clMakeKeyword(clProto),
  clMakeStructure(clProto), clMissingArgs(clProto),
  clMultipleNewlines1(clProto), clNot(clProto), clNthcdr(clProto),
  clNull(clProto), clOutputStream(clProto), clPkg(clProto),
  clPprintIndent(clProto), clPprintNewline(clProto),
  clPprintToplevel(clProto), clPrintElementAbortedP(clProto),
  clPutf(clProto), clRedefineConstant(clProto), clRest(clProto),
  clReturnType(clProto), clSort(clProto), clStructref(clProto),
  cl_SETF_Structref(clProto), clSymbolFunction(clProto),
  clTerpri(clProto), clThird(clProto), clUserId(clProto),
  clWriteChar(clProto), clWriteCharPLUSPLUS(clProto),
  clWriteString(clProto), clWriteStringPLUSPLUS(clProto),
  clWriteToplevel(clProto);

clObject clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clCons(clProto),
  clEndp(clProto), clExport(clProto), clFindPackage(clProto),
  clIntern(clProto), clMakeKeyword(clProto), clMakePackage(clProto),
  clRenamePackage(clProto);

clObject clMINUS_FUNC(clProto), cl1MINUS_FUNC(clProto),
  clAddInteger(clProto), clAsh(clProto), clAshChunkFixnum(clProto),
  clAshChunkXint(clProto), clAshFixnum __P((clObject, clObject)),
  clAshXint(clProto), clBoole(clProto), clBooleFixnum(clProto),
  clBytePosition(clProto), clByteSize(clProto), clCar(clProto),
  clCdr(clProto), clCharpSimpleBaseString __P((clCharp)),
  clComputeXintSize(clProto), clCons(clProto),
  clDigitrefExtend(clProto), clDpb(clProto), clEndp(clProto),
  clEq(clProto), clError(clProto), clExtraArgs(clProto),
  clFixnump(clProto), clFloor(clProto), clGeInteger(clProto),
  clIntegerLength(clProto), clIntegerXint __P((clObject)),
  clLdb(clProto), clLengthFixnum __P((clObject)),
  clLengthXint(clProto), clList(clProto), clLogandc2(clProto),
  clLogcountFixnum __P((clObject)), clLogcountXint(clProto),
  clLogior(clProto), clLogtest(clProto), clLogtestXint(clProto),
  clLogxor(clProto), clMakeKeyword(clProto),
  clMakeXint __P((clObject)), clMaskField(clProto), clMax(clProto),
  clMinusp(clProto), clMissingArgs(clProto), clNot(clProto),
  clSignpXint(clProto), clTruncate(clProto), clXintInteger(clProto),
  clZerop(clProto);

clObject clEQUAL_FUNC(clProto), clAddInteger(clProto),
  clApply(clProto), clArrayDimensions(clProto), clBit(clProto),
  clBitBoole(clProto), clBoole(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCeiling(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCheckSimpleIndex(clProto), clCons(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEq(clProto), clError(clProto), clExtraArgs(clProto),
  clFindClass(clProto), clGeInteger(clProto),
  clGetSimpleVector(clProto), clLength(clProto), clList(clProto),
  clLogand(clProto), clMakeArray(clProto), clMakeKeyword(clProto),
  clMissingArgs(clProto), clNot(clProto), clNull(clProto),
  clOutputStream(clProto), clPrintUnreadableObjectHeader(clProto),
  clPrintUnreadableObjectTrailer(clProto), clRest(clProto),
  clSbit(clProto), cl_SETF_Sbit(clProto), clSbvref(clProto),
  clSetSbvref(clProto), clValues(clProto), clWriteChar(clProto),
  clWriteString(clProto), clZerop(clProto);

clObject clPLUS_FUNC(clProto), clDIVEQUAL_FUNC(clProto),
  cl1PLUS_FUNC(clProto), cl1MINUS_FUNC(clProto), clAddInteger(clProto),
  clAsh(clProto), clAshXint(clProto), clBoundp(clProto),
  clCar(clProto), clCdr(clProto), clCeiling(clProto),
  clCmpUxint(clProto), clComplementDigit(clProto),
  clComputeXintSize(clProto), clCopyXint(clProto),
  clDigitHigh __P((clObject)), clDigitLow __P((clObject)),
  clDigitrefExtend(clProto), clDoubleDoubleFloat __P((double)),
  clExtraArgs(clProto), clFfloor(clProto), clFloat(clProto),
  clGcdUxint(clProto), clGeInteger(clProto),
  cl_SETF_GlobalDeclaration(clProto), clIntegerXint __P((clObject)),
  clLengthFixnum __P((clObject)), clLengthXint(clProto),
  clLog(clProto), clLogand(clProto), clLogior(clProto),
  clLognot(clProto), clLongDivision(clProto),
  clMakeRatio __P((clObject, clObject)), clMakeXint __P((clObject)),
  clMax(clProto), clMinusp(clProto), clMissingArgs(clProto),
  clMultUxint(clProto), clNaddXint(clProto), clNclearUxint(clProto),
  clNcomplementXint(clProto), clNcopyXint(clProto), clNot(clProto),
  clNsubtXint(clProto), clSet(clProto), clSignpXint(clProto),
  clTrimXint __P((clObject, clObject)), clTruncate(clProto),
  clValues(clProto), clXintBuf(clProto), clXintInteger2(clProto),
  clXor(clProto), clZerop(clProto);

clObject clDIVEQUAL_FUNC(clProto), cl1PLUS_FUNC(clProto),
  cl1MINUS_FUNC(clProto), clAddInteger(clProto),
  clAdjustArray(clProto), clApply(clProto), clAref(clProto),
  clArrayDimensions(clProto), clBaseSchar(clProto), clBoundp(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCeiling(clProto), clCharpSimpleBaseString __P((clCharp)),
  clCheckBounds(clProto), clCheckKeys(clProto),
  clCheckSimpleIndex(clProto), clCheckSubscript(clProto),
  clCons(clProto), clCopyArrayContents(clProto),
  clElementVectorType(clProto), clEndp(clProto),
  clEnsureDeftype(clProto), clEnsureGenericFunction(clProto),
  clEnsureMethod(clProto), clEq(clProto), clError(clProto),
  clExpandType(clProto), clExtendedSchar(clProto),
  clExtension(clProto), clExtraArgs(clProto), clFastSetAref(clProto),
  cl_SETF_FillPointer(clProto), clFillPointer(clProto),
  clFindClass(clProto), clFindType(clProto), clGeInteger(clProto),
  cl_SETF_GlobalDeclaration(clProto), clIllegalArrayAxis(clProto),
  clInitializeVector(clProto), clIntegerp(clProto), clKeyArg(clProto),
  clLength(clProto), clList(clProto),
  clMakeBaseCharVector __P((clObject)),
  clMakeBitVector __P((clObject)),
  clMakeComplexArray __P((clObject, clObject, clObject, clObject, clObject, clObject)),
  clMakeExtendedCharVector __P((clObject)),
  clMakeGeneralVector __P((clObject)), clMakeKeyword(clProto),
  clMakeList(clProto),
  clMakeSimpleArray __P((clObject, clObject, clObject)),
  clMakeUninitializedVector(clProto), clMax(clProto),
  clMissingArgs(clProto), clMissingFillPointerError(clProto),
  clNot(clProto), clNth(clProto), clNthcdr(clProto), clNull(clProto),
  clOutputStream(clProto), clPlusp(clProto), clPprintNewline(clProto),
  clPprintToplevel(clProto), clPrintElementAbortedP(clProto),
  clPrintUnreadableObjectHeader(clProto),
  clPrintUnreadableObjectTrailer(clProto), clRedefineConstant(clProto),
  clRest(clProto), clRplaca(clProto), clSbvref(clProto),
  clSetBaseSchar(clProto), clSetExtendedSchar(clProto),
  clSetSbvref(clProto), clSvref(clProto), cl_SETF_Svref(clProto),
  clUpdateArray __P((clObject, clObject, clObject, clObject, clObject, clObject)),
  clUpgradedArrayElementType(clProto), clValues(clProto),
  clWrite(clProto), clWriteArray(clProto), clWriteChar(clProto),
  clWriteString(clProto), clWriteToplevel(clProto), clZerop(clProto);

clObject clAddDoubleFloatDoubleFloat __P((clObject, clObject)),
  clAddDoubleFloatInteger __P((clObject, clObject)),
  clAddDoubleFloatRatio __P((clObject, clObject)),
  clAddDoubleFloatSingleFloat __P((clObject, clObject)),
  clAddIntegerDoubleFloat __P((clObject, clObject)),
  clAddIntegerInteger __P((clObject, clObject)),
  clAddIntegerSingleFloat __P((clObject, clObject)),
  clAddRatioDoubleFloat __P((clObject, clObject)),
  clAddRatioSingleFloat __P((clObject, clObject)),
  clAddSingleFloatDoubleFloat __P((clObject, clObject)),
  clAddSingleFloatInteger __P((clObject, clObject)),
  clAddSingleFloatRatio __P((clObject, clObject)),
  clAddSingleFloatSingleFloat __P((clObject, clObject)),
  clApply(clProto), clAtom(clProto), clBoundp(clProto),
  clCanonicalizeSpecializer(clProto), clCar(clProto), clCdr(clProto),
  clCharpSimpleBaseString __P((clCharp)), clComplexp(clProto),
  clCons(clProto),
  clDivDoubleFloatDoubleFloat __P((clObject, clObject)),
  clDivDoubleFloatInteger __P((clObject, clObject)),
  clDivDoubleFloatRatio __P((clObject, clObject)),
  clDivDoubleFloatSingleFloat __P((clObject, clObject)),
  clDivIntegerDoubleFloat __P((clObject, clObject)),
  clDivIntegerSingleFloat __P((clObject, clObject)),
  clDivRatioDoubleFloat __P((clObject, clObject)),
  clDivRatioSingleFloat __P((clObject, clObject)),
  clDivSingleFloatDoubleFloat __P((clObject, clObject)),
  clDivSingleFloatInteger __P((clObject, clObject)),
  clDivSingleFloatRatio __P((clObject, clObject)),
  clDivSingleFloatSingleFloat __P((clObject, clObject)),
  clDivXint(clProto), clDoubleDoubleFloat __P((double)),
  clDoubleSingleFloat __P((double)), clEndp(clProto),
  clEnsureGenericFunction(clProto), clEnsureMethod(clProto),
  clEqDoubleFloatDoubleFloat __P((clObject, clObject)),
  clEqDoubleFloatInteger __P((clObject, clObject)),
  clEqDoubleFloatSingleFloat __P((clObject, clObject)),
  clEqIntegerDoubleFloat __P((clObject, clObject)),
  clEqIntegerInteger __P((clObject, clObject)),
  clEqIntegerSingleFloat __P((clObject, clObject)),
  clEqSingleFloatDoubleFloat __P((clObject, clObject)),
  clEqSingleFloatInteger __P((clObject, clObject)),
  clEqSingleFloatSingleFloat __P((clObject, clObject)),
  clExtraArgs(clProto), clFindClass(clProto), clFixnump(clProto),
  clGcd(clProto), clGcd2(clProto),
  clGeDoubleFloatDoubleFloat __P((clObject, clObject)),
  clGeDoubleFloatInteger __P((clObject, clObject)),
  clGeDoubleFloatSingleFloat __P((clObject, clObject)),
  clGeIntegerDoubleFloat __P((clObject, clObject)),
  clGeIntegerInteger __P((clObject, clObject)),
  clGeIntegerSingleFloat __P((clObject, clObject)),
  clGeSingleFloatDoubleFloat __P((clObject, clObject)),
  clGeSingleFloatInteger __P((clObject, clObject)),
  clGeSingleFloatSingleFloat __P((clObject, clObject)),
  cl_SETF_GlobalDeclaration(clProto),
  clGtDoubleFloatDoubleFloat __P((clObject, clObject)),
  clGtDoubleFloatInteger __P((clObject, clObject)),
  clGtDoubleFloatSingleFloat __P((clObject, clObject)),
  clGtIntegerDoubleFloat __P((clObject, clObject)),
  clGtIntegerInteger __P((clObject, clObject)),
  clGtIntegerSingleFloat __P((clObject, clObject)),
  clGtSingleFloatDoubleFloat __P((clObject, clObject)),
  clGtSingleFloatInteger __P((clObject, clObject)),
  clGtSingleFloatSingleFloat __P((clObject, clObject)),
  clIntegerXint __P((clObject)),
  clLeDoubleFloatDoubleFloat __P((clObject, clObject)),
  clLeDoubleFloatInteger __P((clObject, clObject)),
  clLeDoubleFloatSingleFloat __P((clObject, clObject)),
  clLeIntegerDoubleFloat __P((clObject, clObject)),
  clLeIntegerInteger __P((clObject, clObject)),
  clLeIntegerSingleFloat __P((clObject, clObject)),
  clLeSingleFloatDoubleFloat __P((clObject, clObject)),
  clLeSingleFloatInteger __P((clObject, clObject)),
  clLeSingleFloatSingleFloat __P((clObject, clObject)),
  clList(clProto),
  clLtDoubleFloatDoubleFloat __P((clObject, clObject)),
  clLtDoubleFloatInteger __P((clObject, clObject)),
  clLtDoubleFloatSingleFloat __P((clObject, clObject)),
  clLtIntegerDoubleFloat __P((clObject, clObject)),
  clLtIntegerInteger __P((clObject, clObject)),
  clLtIntegerSingleFloat __P((clObject, clObject)),
  clLtSingleFloatDoubleFloat __P((clObject, clObject)),
  clLtSingleFloatInteger __P((clObject, clObject)),
  clLtSingleFloatSingleFloat __P((clObject, clObject)),
  clMakeKeyword(clProto), clMakeRatio __P((clObject, clObject)),
  clMinusp(clProto), clMissingArgs(clProto),
  clMultDoubleFloatDoubleFloat __P((clObject, clObject)),
  clMultDoubleFloatInteger __P((clObject, clObject)),
  clMultDoubleFloatRatio __P((clObject, clObject)),
  clMultDoubleFloatSingleFloat __P((clObject, clObject)),
  clMultIntegerDoubleFloat __P((clObject, clObject)),
  clMultIntegerInteger __P((clObject, clObject)),
  clMultIntegerSingleFloat __P((clObject, clObject)),
  clMultRatioDoubleFloat __P((clObject, clObject)),
  clMultRatioSingleFloat __P((clObject, clObject)),
  clMultSingleFloatDoubleFloat __P((clObject, clObject)),
  clMultSingleFloatInteger __P((clObject, clObject)),
  clMultSingleFloatRatio __P((clObject, clObject)),
  clMultSingleFloatSingleFloat __P((clObject, clObject)),
  clNot(clProto), clNull(clProto), clRational(clProto),
  clRedefineConstant(clProto), clRest(clProto),
  clSubtDoubleFloatDoubleFloat __P((clObject, clObject)),
  clSubtDoubleFloatInteger __P((clObject, clObject)),
  clSubtDoubleFloatRatio __P((clObject, clObject)),
  clSubtDoubleFloatSingleFloat __P((clObject, clObject)),
  clSubtIntegerDoubleFloat __P((clObject, clObject)),
  clSubtIntegerInteger __P((clObject, clObject)),
  clSubtIntegerSingleFloat __P((clObject, clObject)),
  clSubtRatioDoubleFloat __P((clObject, clObject)),
  clSubtRatioSingleFloat __P((clObject, clObject)),
  clSubtSingleFloatDoubleFloat __P((clObject, clObject)),
  clSubtSingleFloatInteger __P((clObject, clObject)),
  clSubtSingleFloatRatio __P((clObject, clObject)),
  clSubtSingleFloatSingleFloat __P((clObject, clObject));

